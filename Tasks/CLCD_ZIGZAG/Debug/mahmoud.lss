
mahmoud.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000028b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000028b8  0000294c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800068  00800068  00002954  2**0
                  ALLOC
  3 .stab         00001eb4  00000000  00000000  00002954  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e27  00000000  00000000  00004808  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000562f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000578f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000591e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00007963  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00008a64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  000099e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00009b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  00009e2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a6b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a9 36       	cpi	r26, 0x69	; 105
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e8 eb       	ldi	r30, 0xB8	; 184
      78:	f8 e2       	ldi	r31, 0x28	; 40
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 67 13 	call	0x26ce	; 0x26ce <main>
      8a:	0c 94 5a 14 	jmp	0x28b4	; 0x28b4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 23 14 	jmp	0x2846	; 0x2846 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 3f 14 	jmp	0x287e	; 0x287e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 2f 14 	jmp	0x285e	; 0x285e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 4b 14 	jmp	0x2896	; 0x2896 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 2f 14 	jmp	0x285e	; 0x285e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 4b 14 	jmp	0x2896	; 0x2896 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 23 14 	jmp	0x2846	; 0x2846 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 3f 14 	jmp	0x287e	; 0x287e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 2b 14 	jmp	0x2856	; 0x2856 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 47 14 	jmp	0x288e	; 0x288e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 2f 14 	jmp	0x285e	; 0x285e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 4b 14 	jmp	0x2896	; 0x2896 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 2f 14 	jmp	0x285e	; 0x285e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 4b 14 	jmp	0x2896	; 0x2896 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 2f 14 	jmp	0x285e	; 0x285e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 4b 14 	jmp	0x2896	; 0x2896 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 33 14 	jmp	0x2866	; 0x2866 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 4f 14 	jmp	0x289e	; 0x289e <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <MCAL_DIO_voidSetPinMode>:
/** ======================= TWI Functions Implementation ==================== */
/*
 * To set the pin mode: DDRx = (0) -> Input | (1) -> Output
 */
void MCAL_DIO_voidSetPinMode(DIOPort_t Copy_DIOPort_tDIOx, DIOPin_t Copy_u8PINn, DIOMode_t Copy_DIOMode_tMode)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <MCAL_DIO_voidSetPinMode+0x6>
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <MCAL_DIO_voidSetPinMode+0x8>
     ca6:	0f 92       	push	r0
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
     cac:	89 83       	std	Y+1, r24	; 0x01
     cae:	6a 83       	std	Y+2, r22	; 0x02
     cb0:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_DIOPort_tDIOx < 4)
     cb2:	89 81       	ldd	r24, Y+1	; 0x01
     cb4:	84 30       	cpi	r24, 0x04	; 4
     cb6:	08 f0       	brcs	.+2      	; 0xcba <MCAL_DIO_voidSetPinMode+0x1c>
     cb8:	d5 c0       	rjmp	.+426    	; 0xe64 <MCAL_DIO_voidSetPinMode+0x1c6>
	{
		if(Copy_u8PINn < 8)
     cba:	8a 81       	ldd	r24, Y+2	; 0x02
     cbc:	88 30       	cpi	r24, 0x08	; 8
     cbe:	08 f0       	brcs	.+2      	; 0xcc2 <MCAL_DIO_voidSetPinMode+0x24>
     cc0:	d1 c0       	rjmp	.+418    	; 0xe64 <MCAL_DIO_voidSetPinMode+0x1c6>
		{
			switch(Copy_DIOPort_tDIOx)
     cc2:	89 81       	ldd	r24, Y+1	; 0x01
     cc4:	28 2f       	mov	r18, r24
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	3d 83       	std	Y+5, r19	; 0x05
     cca:	2c 83       	std	Y+4, r18	; 0x04
     ccc:	8c 81       	ldd	r24, Y+4	; 0x04
     cce:	9d 81       	ldd	r25, Y+5	; 0x05
     cd0:	81 30       	cpi	r24, 0x01	; 1
     cd2:	91 05       	cpc	r25, r1
     cd4:	09 f4       	brne	.+2      	; 0xcd8 <MCAL_DIO_voidSetPinMode+0x3a>
     cd6:	43 c0       	rjmp	.+134    	; 0xd5e <MCAL_DIO_voidSetPinMode+0xc0>
     cd8:	2c 81       	ldd	r18, Y+4	; 0x04
     cda:	3d 81       	ldd	r19, Y+5	; 0x05
     cdc:	22 30       	cpi	r18, 0x02	; 2
     cde:	31 05       	cpc	r19, r1
     ce0:	2c f4       	brge	.+10     	; 0xcec <MCAL_DIO_voidSetPinMode+0x4e>
     ce2:	8c 81       	ldd	r24, Y+4	; 0x04
     ce4:	9d 81       	ldd	r25, Y+5	; 0x05
     ce6:	00 97       	sbiw	r24, 0x00	; 0
     ce8:	71 f0       	breq	.+28     	; 0xd06 <MCAL_DIO_voidSetPinMode+0x68>
     cea:	bc c0       	rjmp	.+376    	; 0xe64 <MCAL_DIO_voidSetPinMode+0x1c6>
     cec:	2c 81       	ldd	r18, Y+4	; 0x04
     cee:	3d 81       	ldd	r19, Y+5	; 0x05
     cf0:	22 30       	cpi	r18, 0x02	; 2
     cf2:	31 05       	cpc	r19, r1
     cf4:	09 f4       	brne	.+2      	; 0xcf8 <MCAL_DIO_voidSetPinMode+0x5a>
     cf6:	5f c0       	rjmp	.+190    	; 0xdb6 <MCAL_DIO_voidSetPinMode+0x118>
     cf8:	8c 81       	ldd	r24, Y+4	; 0x04
     cfa:	9d 81       	ldd	r25, Y+5	; 0x05
     cfc:	83 30       	cpi	r24, 0x03	; 3
     cfe:	91 05       	cpc	r25, r1
     d00:	09 f4       	brne	.+2      	; 0xd04 <MCAL_DIO_voidSetPinMode+0x66>
     d02:	85 c0       	rjmp	.+266    	; 0xe0e <MCAL_DIO_voidSetPinMode+0x170>
     d04:	af c0       	rjmp	.+350    	; 0xe64 <MCAL_DIO_voidSetPinMode+0x1c6>
			{
				case DIOA:			/* PORTA */
					if(Copy_DIOMode_tMode) SET_BIT(DDRA,Copy_u8PINn);
     d06:	8b 81       	ldd	r24, Y+3	; 0x03
     d08:	88 23       	and	r24, r24
     d0a:	a1 f0       	breq	.+40     	; 0xd34 <MCAL_DIO_voidSetPinMode+0x96>
     d0c:	aa e3       	ldi	r26, 0x3A	; 58
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	ea e3       	ldi	r30, 0x3A	; 58
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	48 2f       	mov	r20, r24
     d18:	8a 81       	ldd	r24, Y+2	; 0x02
     d1a:	28 2f       	mov	r18, r24
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	02 2e       	mov	r0, r18
     d24:	02 c0       	rjmp	.+4      	; 0xd2a <MCAL_DIO_voidSetPinMode+0x8c>
     d26:	88 0f       	add	r24, r24
     d28:	99 1f       	adc	r25, r25
     d2a:	0a 94       	dec	r0
     d2c:	e2 f7       	brpl	.-8      	; 0xd26 <MCAL_DIO_voidSetPinMode+0x88>
     d2e:	84 2b       	or	r24, r20
     d30:	8c 93       	st	X, r24
     d32:	98 c0       	rjmp	.+304    	; 0xe64 <MCAL_DIO_voidSetPinMode+0x1c6>
					else CLR_BIT(DDRA,Copy_u8PINn);
     d34:	aa e3       	ldi	r26, 0x3A	; 58
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	ea e3       	ldi	r30, 0x3A	; 58
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	48 2f       	mov	r20, r24
     d40:	8a 81       	ldd	r24, Y+2	; 0x02
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	02 2e       	mov	r0, r18
     d4c:	02 c0       	rjmp	.+4      	; 0xd52 <MCAL_DIO_voidSetPinMode+0xb4>
     d4e:	88 0f       	add	r24, r24
     d50:	99 1f       	adc	r25, r25
     d52:	0a 94       	dec	r0
     d54:	e2 f7       	brpl	.-8      	; 0xd4e <MCAL_DIO_voidSetPinMode+0xb0>
     d56:	80 95       	com	r24
     d58:	84 23       	and	r24, r20
     d5a:	8c 93       	st	X, r24
     d5c:	83 c0       	rjmp	.+262    	; 0xe64 <MCAL_DIO_voidSetPinMode+0x1c6>
					break;
				case DIOB:			/* PORTB */
					if(Copy_DIOMode_tMode) SET_BIT(DDRB,Copy_u8PINn);
     d5e:	8b 81       	ldd	r24, Y+3	; 0x03
     d60:	88 23       	and	r24, r24
     d62:	a1 f0       	breq	.+40     	; 0xd8c <MCAL_DIO_voidSetPinMode+0xee>
     d64:	a7 e3       	ldi	r26, 0x37	; 55
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	e7 e3       	ldi	r30, 0x37	; 55
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	48 2f       	mov	r20, r24
     d70:	8a 81       	ldd	r24, Y+2	; 0x02
     d72:	28 2f       	mov	r18, r24
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	02 2e       	mov	r0, r18
     d7c:	02 c0       	rjmp	.+4      	; 0xd82 <MCAL_DIO_voidSetPinMode+0xe4>
     d7e:	88 0f       	add	r24, r24
     d80:	99 1f       	adc	r25, r25
     d82:	0a 94       	dec	r0
     d84:	e2 f7       	brpl	.-8      	; 0xd7e <MCAL_DIO_voidSetPinMode+0xe0>
     d86:	84 2b       	or	r24, r20
     d88:	8c 93       	st	X, r24
     d8a:	6c c0       	rjmp	.+216    	; 0xe64 <MCAL_DIO_voidSetPinMode+0x1c6>
					else CLR_BIT(DDRB,Copy_u8PINn);
     d8c:	a7 e3       	ldi	r26, 0x37	; 55
     d8e:	b0 e0       	ldi	r27, 0x00	; 0
     d90:	e7 e3       	ldi	r30, 0x37	; 55
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	80 81       	ld	r24, Z
     d96:	48 2f       	mov	r20, r24
     d98:	8a 81       	ldd	r24, Y+2	; 0x02
     d9a:	28 2f       	mov	r18, r24
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	02 2e       	mov	r0, r18
     da4:	02 c0       	rjmp	.+4      	; 0xdaa <MCAL_DIO_voidSetPinMode+0x10c>
     da6:	88 0f       	add	r24, r24
     da8:	99 1f       	adc	r25, r25
     daa:	0a 94       	dec	r0
     dac:	e2 f7       	brpl	.-8      	; 0xda6 <MCAL_DIO_voidSetPinMode+0x108>
     dae:	80 95       	com	r24
     db0:	84 23       	and	r24, r20
     db2:	8c 93       	st	X, r24
     db4:	57 c0       	rjmp	.+174    	; 0xe64 <MCAL_DIO_voidSetPinMode+0x1c6>
					break;
				case DIOC:			/* PORTC */
					if(Copy_DIOMode_tMode) SET_BIT(DDRC,Copy_u8PINn);
     db6:	8b 81       	ldd	r24, Y+3	; 0x03
     db8:	88 23       	and	r24, r24
     dba:	a1 f0       	breq	.+40     	; 0xde4 <MCAL_DIO_voidSetPinMode+0x146>
     dbc:	a4 e3       	ldi	r26, 0x34	; 52
     dbe:	b0 e0       	ldi	r27, 0x00	; 0
     dc0:	e4 e3       	ldi	r30, 0x34	; 52
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	80 81       	ld	r24, Z
     dc6:	48 2f       	mov	r20, r24
     dc8:	8a 81       	ldd	r24, Y+2	; 0x02
     dca:	28 2f       	mov	r18, r24
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	02 2e       	mov	r0, r18
     dd4:	02 c0       	rjmp	.+4      	; 0xdda <MCAL_DIO_voidSetPinMode+0x13c>
     dd6:	88 0f       	add	r24, r24
     dd8:	99 1f       	adc	r25, r25
     dda:	0a 94       	dec	r0
     ddc:	e2 f7       	brpl	.-8      	; 0xdd6 <MCAL_DIO_voidSetPinMode+0x138>
     dde:	84 2b       	or	r24, r20
     de0:	8c 93       	st	X, r24
     de2:	40 c0       	rjmp	.+128    	; 0xe64 <MCAL_DIO_voidSetPinMode+0x1c6>
					else CLR_BIT(DDRC,Copy_u8PINn);
     de4:	a4 e3       	ldi	r26, 0x34	; 52
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	e4 e3       	ldi	r30, 0x34	; 52
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	48 2f       	mov	r20, r24
     df0:	8a 81       	ldd	r24, Y+2	; 0x02
     df2:	28 2f       	mov	r18, r24
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	02 2e       	mov	r0, r18
     dfc:	02 c0       	rjmp	.+4      	; 0xe02 <MCAL_DIO_voidSetPinMode+0x164>
     dfe:	88 0f       	add	r24, r24
     e00:	99 1f       	adc	r25, r25
     e02:	0a 94       	dec	r0
     e04:	e2 f7       	brpl	.-8      	; 0xdfe <MCAL_DIO_voidSetPinMode+0x160>
     e06:	80 95       	com	r24
     e08:	84 23       	and	r24, r20
     e0a:	8c 93       	st	X, r24
     e0c:	2b c0       	rjmp	.+86     	; 0xe64 <MCAL_DIO_voidSetPinMode+0x1c6>
					break;
				case DIOD:			/* PORTD */
					if(Copy_DIOMode_tMode) SET_BIT(DDRD,Copy_u8PINn);
     e0e:	8b 81       	ldd	r24, Y+3	; 0x03
     e10:	88 23       	and	r24, r24
     e12:	a1 f0       	breq	.+40     	; 0xe3c <MCAL_DIO_voidSetPinMode+0x19e>
     e14:	a1 e3       	ldi	r26, 0x31	; 49
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	e1 e3       	ldi	r30, 0x31	; 49
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	48 2f       	mov	r20, r24
     e20:	8a 81       	ldd	r24, Y+2	; 0x02
     e22:	28 2f       	mov	r18, r24
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	02 2e       	mov	r0, r18
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <MCAL_DIO_voidSetPinMode+0x194>
     e2e:	88 0f       	add	r24, r24
     e30:	99 1f       	adc	r25, r25
     e32:	0a 94       	dec	r0
     e34:	e2 f7       	brpl	.-8      	; 0xe2e <MCAL_DIO_voidSetPinMode+0x190>
     e36:	84 2b       	or	r24, r20
     e38:	8c 93       	st	X, r24
     e3a:	14 c0       	rjmp	.+40     	; 0xe64 <MCAL_DIO_voidSetPinMode+0x1c6>
					else CLR_BIT(DDRD,Copy_u8PINn);
     e3c:	a1 e3       	ldi	r26, 0x31	; 49
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	e1 e3       	ldi	r30, 0x31	; 49
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	48 2f       	mov	r20, r24
     e48:	8a 81       	ldd	r24, Y+2	; 0x02
     e4a:	28 2f       	mov	r18, r24
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	02 2e       	mov	r0, r18
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <MCAL_DIO_voidSetPinMode+0x1bc>
     e56:	88 0f       	add	r24, r24
     e58:	99 1f       	adc	r25, r25
     e5a:	0a 94       	dec	r0
     e5c:	e2 f7       	brpl	.-8      	; 0xe56 <MCAL_DIO_voidSetPinMode+0x1b8>
     e5e:	80 95       	com	r24
     e60:	84 23       	and	r24, r20
     e62:	8c 93       	st	X, r24
	}
	else
	{
		//Error_Handler();
	}
}
     e64:	0f 90       	pop	r0
     e66:	0f 90       	pop	r0
     e68:	0f 90       	pop	r0
     e6a:	0f 90       	pop	r0
     e6c:	0f 90       	pop	r0
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	08 95       	ret

00000e74 <MCAL_DIO_voidWritePin>:

/*
 *  To write on a specific output pin from PROTx register
 */
void MCAL_DIO_voidWritePin(DIOPort_t Copy_DIOPort_tDIOx, DIOPin_t Copy_DIOPin_tPINn, DIOState_t Copy_DIOState_tValue)
{
     e74:	df 93       	push	r29
     e76:	cf 93       	push	r28
     e78:	00 d0       	rcall	.+0      	; 0xe7a <MCAL_DIO_voidWritePin+0x6>
     e7a:	00 d0       	rcall	.+0      	; 0xe7c <MCAL_DIO_voidWritePin+0x8>
     e7c:	0f 92       	push	r0
     e7e:	cd b7       	in	r28, 0x3d	; 61
     e80:	de b7       	in	r29, 0x3e	; 62
     e82:	89 83       	std	Y+1, r24	; 0x01
     e84:	6a 83       	std	Y+2, r22	; 0x02
     e86:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_DIOPort_tDIOx < 4)
     e88:	89 81       	ldd	r24, Y+1	; 0x01
     e8a:	84 30       	cpi	r24, 0x04	; 4
     e8c:	08 f0       	brcs	.+2      	; 0xe90 <MCAL_DIO_voidWritePin+0x1c>
     e8e:	d5 c0       	rjmp	.+426    	; 0x103a <MCAL_DIO_voidWritePin+0x1c6>
	{
		if(Copy_DIOPin_tPINn < 8)
     e90:	8a 81       	ldd	r24, Y+2	; 0x02
     e92:	88 30       	cpi	r24, 0x08	; 8
     e94:	08 f0       	brcs	.+2      	; 0xe98 <MCAL_DIO_voidWritePin+0x24>
     e96:	d1 c0       	rjmp	.+418    	; 0x103a <MCAL_DIO_voidWritePin+0x1c6>
		{
			switch(Copy_DIOPort_tDIOx)
     e98:	89 81       	ldd	r24, Y+1	; 0x01
     e9a:	28 2f       	mov	r18, r24
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	3d 83       	std	Y+5, r19	; 0x05
     ea0:	2c 83       	std	Y+4, r18	; 0x04
     ea2:	8c 81       	ldd	r24, Y+4	; 0x04
     ea4:	9d 81       	ldd	r25, Y+5	; 0x05
     ea6:	81 30       	cpi	r24, 0x01	; 1
     ea8:	91 05       	cpc	r25, r1
     eaa:	09 f4       	brne	.+2      	; 0xeae <MCAL_DIO_voidWritePin+0x3a>
     eac:	43 c0       	rjmp	.+134    	; 0xf34 <MCAL_DIO_voidWritePin+0xc0>
     eae:	2c 81       	ldd	r18, Y+4	; 0x04
     eb0:	3d 81       	ldd	r19, Y+5	; 0x05
     eb2:	22 30       	cpi	r18, 0x02	; 2
     eb4:	31 05       	cpc	r19, r1
     eb6:	2c f4       	brge	.+10     	; 0xec2 <MCAL_DIO_voidWritePin+0x4e>
     eb8:	8c 81       	ldd	r24, Y+4	; 0x04
     eba:	9d 81       	ldd	r25, Y+5	; 0x05
     ebc:	00 97       	sbiw	r24, 0x00	; 0
     ebe:	71 f0       	breq	.+28     	; 0xedc <MCAL_DIO_voidWritePin+0x68>
     ec0:	bc c0       	rjmp	.+376    	; 0x103a <MCAL_DIO_voidWritePin+0x1c6>
     ec2:	2c 81       	ldd	r18, Y+4	; 0x04
     ec4:	3d 81       	ldd	r19, Y+5	; 0x05
     ec6:	22 30       	cpi	r18, 0x02	; 2
     ec8:	31 05       	cpc	r19, r1
     eca:	09 f4       	brne	.+2      	; 0xece <MCAL_DIO_voidWritePin+0x5a>
     ecc:	5f c0       	rjmp	.+190    	; 0xf8c <MCAL_DIO_voidWritePin+0x118>
     ece:	8c 81       	ldd	r24, Y+4	; 0x04
     ed0:	9d 81       	ldd	r25, Y+5	; 0x05
     ed2:	83 30       	cpi	r24, 0x03	; 3
     ed4:	91 05       	cpc	r25, r1
     ed6:	09 f4       	brne	.+2      	; 0xeda <MCAL_DIO_voidWritePin+0x66>
     ed8:	85 c0       	rjmp	.+266    	; 0xfe4 <MCAL_DIO_voidWritePin+0x170>
     eda:	af c0       	rjmp	.+350    	; 0x103a <MCAL_DIO_voidWritePin+0x1c6>
			{
				case DIOA:			/* PORTA */
					if(Copy_DIOState_tValue) SET_BIT(PORTA,Copy_DIOPin_tPINn);
     edc:	8b 81       	ldd	r24, Y+3	; 0x03
     ede:	88 23       	and	r24, r24
     ee0:	a1 f0       	breq	.+40     	; 0xf0a <MCAL_DIO_voidWritePin+0x96>
     ee2:	ab e3       	ldi	r26, 0x3B	; 59
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	eb e3       	ldi	r30, 0x3B	; 59
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	48 2f       	mov	r20, r24
     eee:	8a 81       	ldd	r24, Y+2	; 0x02
     ef0:	28 2f       	mov	r18, r24
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	02 2e       	mov	r0, r18
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <MCAL_DIO_voidWritePin+0x8c>
     efc:	88 0f       	add	r24, r24
     efe:	99 1f       	adc	r25, r25
     f00:	0a 94       	dec	r0
     f02:	e2 f7       	brpl	.-8      	; 0xefc <MCAL_DIO_voidWritePin+0x88>
     f04:	84 2b       	or	r24, r20
     f06:	8c 93       	st	X, r24
     f08:	98 c0       	rjmp	.+304    	; 0x103a <MCAL_DIO_voidWritePin+0x1c6>
					else CLR_BIT(PORTA,Copy_DIOPin_tPINn);
     f0a:	ab e3       	ldi	r26, 0x3B	; 59
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	eb e3       	ldi	r30, 0x3B	; 59
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	48 2f       	mov	r20, r24
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	02 2e       	mov	r0, r18
     f22:	02 c0       	rjmp	.+4      	; 0xf28 <MCAL_DIO_voidWritePin+0xb4>
     f24:	88 0f       	add	r24, r24
     f26:	99 1f       	adc	r25, r25
     f28:	0a 94       	dec	r0
     f2a:	e2 f7       	brpl	.-8      	; 0xf24 <MCAL_DIO_voidWritePin+0xb0>
     f2c:	80 95       	com	r24
     f2e:	84 23       	and	r24, r20
     f30:	8c 93       	st	X, r24
     f32:	83 c0       	rjmp	.+262    	; 0x103a <MCAL_DIO_voidWritePin+0x1c6>
					break;
				case DIOB:			/* PORTB */
					if(Copy_DIOState_tValue) SET_BIT(PORTB,Copy_DIOPin_tPINn);
     f34:	8b 81       	ldd	r24, Y+3	; 0x03
     f36:	88 23       	and	r24, r24
     f38:	a1 f0       	breq	.+40     	; 0xf62 <MCAL_DIO_voidWritePin+0xee>
     f3a:	a8 e3       	ldi	r26, 0x38	; 56
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	e8 e3       	ldi	r30, 0x38	; 56
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	48 2f       	mov	r20, r24
     f46:	8a 81       	ldd	r24, Y+2	; 0x02
     f48:	28 2f       	mov	r18, r24
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	02 2e       	mov	r0, r18
     f52:	02 c0       	rjmp	.+4      	; 0xf58 <MCAL_DIO_voidWritePin+0xe4>
     f54:	88 0f       	add	r24, r24
     f56:	99 1f       	adc	r25, r25
     f58:	0a 94       	dec	r0
     f5a:	e2 f7       	brpl	.-8      	; 0xf54 <MCAL_DIO_voidWritePin+0xe0>
     f5c:	84 2b       	or	r24, r20
     f5e:	8c 93       	st	X, r24
     f60:	6c c0       	rjmp	.+216    	; 0x103a <MCAL_DIO_voidWritePin+0x1c6>
					else CLR_BIT(PORTB,Copy_DIOPin_tPINn);
     f62:	a8 e3       	ldi	r26, 0x38	; 56
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	e8 e3       	ldi	r30, 0x38	; 56
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	48 2f       	mov	r20, r24
     f6e:	8a 81       	ldd	r24, Y+2	; 0x02
     f70:	28 2f       	mov	r18, r24
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	02 2e       	mov	r0, r18
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <MCAL_DIO_voidWritePin+0x10c>
     f7c:	88 0f       	add	r24, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	0a 94       	dec	r0
     f82:	e2 f7       	brpl	.-8      	; 0xf7c <MCAL_DIO_voidWritePin+0x108>
     f84:	80 95       	com	r24
     f86:	84 23       	and	r24, r20
     f88:	8c 93       	st	X, r24
     f8a:	57 c0       	rjmp	.+174    	; 0x103a <MCAL_DIO_voidWritePin+0x1c6>
					break;
				case DIOC:			/* PORTC */
					if(Copy_DIOState_tValue) SET_BIT(PORTC,Copy_DIOPin_tPINn);
     f8c:	8b 81       	ldd	r24, Y+3	; 0x03
     f8e:	88 23       	and	r24, r24
     f90:	a1 f0       	breq	.+40     	; 0xfba <MCAL_DIO_voidWritePin+0x146>
     f92:	a5 e3       	ldi	r26, 0x35	; 53
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	e5 e3       	ldi	r30, 0x35	; 53
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	48 2f       	mov	r20, r24
     f9e:	8a 81       	ldd	r24, Y+2	; 0x02
     fa0:	28 2f       	mov	r18, r24
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	02 2e       	mov	r0, r18
     faa:	02 c0       	rjmp	.+4      	; 0xfb0 <MCAL_DIO_voidWritePin+0x13c>
     fac:	88 0f       	add	r24, r24
     fae:	99 1f       	adc	r25, r25
     fb0:	0a 94       	dec	r0
     fb2:	e2 f7       	brpl	.-8      	; 0xfac <MCAL_DIO_voidWritePin+0x138>
     fb4:	84 2b       	or	r24, r20
     fb6:	8c 93       	st	X, r24
     fb8:	40 c0       	rjmp	.+128    	; 0x103a <MCAL_DIO_voidWritePin+0x1c6>
					else CLR_BIT(PORTC,Copy_DIOPin_tPINn);
     fba:	a5 e3       	ldi	r26, 0x35	; 53
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	e5 e3       	ldi	r30, 0x35	; 53
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	48 2f       	mov	r20, r24
     fc6:	8a 81       	ldd	r24, Y+2	; 0x02
     fc8:	28 2f       	mov	r18, r24
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	02 2e       	mov	r0, r18
     fd2:	02 c0       	rjmp	.+4      	; 0xfd8 <MCAL_DIO_voidWritePin+0x164>
     fd4:	88 0f       	add	r24, r24
     fd6:	99 1f       	adc	r25, r25
     fd8:	0a 94       	dec	r0
     fda:	e2 f7       	brpl	.-8      	; 0xfd4 <MCAL_DIO_voidWritePin+0x160>
     fdc:	80 95       	com	r24
     fde:	84 23       	and	r24, r20
     fe0:	8c 93       	st	X, r24
     fe2:	2b c0       	rjmp	.+86     	; 0x103a <MCAL_DIO_voidWritePin+0x1c6>
					break;
				case DIOD:			/* PORTD */
					if(Copy_DIOState_tValue) SET_BIT(PORTD,Copy_DIOPin_tPINn);
     fe4:	8b 81       	ldd	r24, Y+3	; 0x03
     fe6:	88 23       	and	r24, r24
     fe8:	a1 f0       	breq	.+40     	; 0x1012 <MCAL_DIO_voidWritePin+0x19e>
     fea:	a2 e3       	ldi	r26, 0x32	; 50
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	e2 e3       	ldi	r30, 0x32	; 50
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	48 2f       	mov	r20, r24
     ff6:	8a 81       	ldd	r24, Y+2	; 0x02
     ff8:	28 2f       	mov	r18, r24
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	02 2e       	mov	r0, r18
    1002:	02 c0       	rjmp	.+4      	; 0x1008 <MCAL_DIO_voidWritePin+0x194>
    1004:	88 0f       	add	r24, r24
    1006:	99 1f       	adc	r25, r25
    1008:	0a 94       	dec	r0
    100a:	e2 f7       	brpl	.-8      	; 0x1004 <MCAL_DIO_voidWritePin+0x190>
    100c:	84 2b       	or	r24, r20
    100e:	8c 93       	st	X, r24
    1010:	14 c0       	rjmp	.+40     	; 0x103a <MCAL_DIO_voidWritePin+0x1c6>
					else CLR_BIT(PORTD,Copy_DIOPin_tPINn);
    1012:	a2 e3       	ldi	r26, 0x32	; 50
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	e2 e3       	ldi	r30, 0x32	; 50
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	48 2f       	mov	r20, r24
    101e:	8a 81       	ldd	r24, Y+2	; 0x02
    1020:	28 2f       	mov	r18, r24
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	02 2e       	mov	r0, r18
    102a:	02 c0       	rjmp	.+4      	; 0x1030 <MCAL_DIO_voidWritePin+0x1bc>
    102c:	88 0f       	add	r24, r24
    102e:	99 1f       	adc	r25, r25
    1030:	0a 94       	dec	r0
    1032:	e2 f7       	brpl	.-8      	; 0x102c <MCAL_DIO_voidWritePin+0x1b8>
    1034:	80 95       	com	r24
    1036:	84 23       	and	r24, r20
    1038:	8c 93       	st	X, r24
	}
	else
	{
		//Error_Handler();
	}
}
    103a:	0f 90       	pop	r0
    103c:	0f 90       	pop	r0
    103e:	0f 90       	pop	r0
    1040:	0f 90       	pop	r0
    1042:	0f 90       	pop	r0
    1044:	cf 91       	pop	r28
    1046:	df 91       	pop	r29
    1048:	08 95       	ret

0000104a <MCAL_DIO_u8ReadPin>:

/*
 * To read a specific output pin from PINx register
 */
u8 MCAL_DIO_u8ReadPin(DIOPort_t Copy_DIOPort_tDIOx, DIOPin_t Copy_DIOPin_tPINn)
{
    104a:	df 93       	push	r29
    104c:	cf 93       	push	r28
    104e:	00 d0       	rcall	.+0      	; 0x1050 <MCAL_DIO_u8ReadPin+0x6>
    1050:	00 d0       	rcall	.+0      	; 0x1052 <MCAL_DIO_u8ReadPin+0x8>
    1052:	00 d0       	rcall	.+0      	; 0x1054 <MCAL_DIO_u8ReadPin+0xa>
    1054:	cd b7       	in	r28, 0x3d	; 61
    1056:	de b7       	in	r29, 0x3e	; 62
    1058:	8a 83       	std	Y+2, r24	; 0x02
    105a:	6b 83       	std	Y+3, r22	; 0x03
	u8 pinValue;
	if(Copy_DIOPort_tDIOx < 4)
    105c:	8a 81       	ldd	r24, Y+2	; 0x02
    105e:	84 30       	cpi	r24, 0x04	; 4
    1060:	08 f0       	brcs	.+2      	; 0x1064 <MCAL_DIO_u8ReadPin+0x1a>
    1062:	71 c0       	rjmp	.+226    	; 0x1146 <MCAL_DIO_u8ReadPin+0xfc>
	{
		if(Copy_DIOPin_tPINn < 8)
    1064:	8b 81       	ldd	r24, Y+3	; 0x03
    1066:	88 30       	cpi	r24, 0x08	; 8
    1068:	08 f0       	brcs	.+2      	; 0x106c <MCAL_DIO_u8ReadPin+0x22>
    106a:	6a c0       	rjmp	.+212    	; 0x1140 <MCAL_DIO_u8ReadPin+0xf6>
		{
			switch(Copy_DIOPort_tDIOx)
    106c:	8a 81       	ldd	r24, Y+2	; 0x02
    106e:	28 2f       	mov	r18, r24
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	3e 83       	std	Y+6, r19	; 0x06
    1074:	2d 83       	std	Y+5, r18	; 0x05
    1076:	4d 81       	ldd	r20, Y+5	; 0x05
    1078:	5e 81       	ldd	r21, Y+6	; 0x06
    107a:	41 30       	cpi	r20, 0x01	; 1
    107c:	51 05       	cpc	r21, r1
    107e:	41 f1       	breq	.+80     	; 0x10d0 <MCAL_DIO_u8ReadPin+0x86>
    1080:	8d 81       	ldd	r24, Y+5	; 0x05
    1082:	9e 81       	ldd	r25, Y+6	; 0x06
    1084:	82 30       	cpi	r24, 0x02	; 2
    1086:	91 05       	cpc	r25, r1
    1088:	34 f4       	brge	.+12     	; 0x1096 <MCAL_DIO_u8ReadPin+0x4c>
    108a:	2d 81       	ldd	r18, Y+5	; 0x05
    108c:	3e 81       	ldd	r19, Y+6	; 0x06
    108e:	21 15       	cp	r18, r1
    1090:	31 05       	cpc	r19, r1
    1092:	61 f0       	breq	.+24     	; 0x10ac <MCAL_DIO_u8ReadPin+0x62>
    1094:	52 c0       	rjmp	.+164    	; 0x113a <MCAL_DIO_u8ReadPin+0xf0>
    1096:	4d 81       	ldd	r20, Y+5	; 0x05
    1098:	5e 81       	ldd	r21, Y+6	; 0x06
    109a:	42 30       	cpi	r20, 0x02	; 2
    109c:	51 05       	cpc	r21, r1
    109e:	51 f1       	breq	.+84     	; 0x10f4 <MCAL_DIO_u8ReadPin+0xaa>
    10a0:	8d 81       	ldd	r24, Y+5	; 0x05
    10a2:	9e 81       	ldd	r25, Y+6	; 0x06
    10a4:	83 30       	cpi	r24, 0x03	; 3
    10a6:	91 05       	cpc	r25, r1
    10a8:	b9 f1       	breq	.+110    	; 0x1118 <MCAL_DIO_u8ReadPin+0xce>
    10aa:	47 c0       	rjmp	.+142    	; 0x113a <MCAL_DIO_u8ReadPin+0xf0>
			{
				case DIOA:			/* PORTA */
					pinValue = GET_BIT(PINA,Copy_DIOPin_tPINn);
    10ac:	e9 e3       	ldi	r30, 0x39	; 57
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	28 2f       	mov	r18, r24
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	8b 81       	ldd	r24, Y+3	; 0x03
    10b8:	88 2f       	mov	r24, r24
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	a9 01       	movw	r20, r18
    10be:	02 c0       	rjmp	.+4      	; 0x10c4 <MCAL_DIO_u8ReadPin+0x7a>
    10c0:	55 95       	asr	r21
    10c2:	47 95       	ror	r20
    10c4:	8a 95       	dec	r24
    10c6:	e2 f7       	brpl	.-8      	; 0x10c0 <MCAL_DIO_u8ReadPin+0x76>
    10c8:	ca 01       	movw	r24, r20
    10ca:	81 70       	andi	r24, 0x01	; 1
    10cc:	89 83       	std	Y+1, r24	; 0x01
    10ce:	35 c0       	rjmp	.+106    	; 0x113a <MCAL_DIO_u8ReadPin+0xf0>
					break;
				case DIOB:			/* PORTB */
					pinValue = GET_BIT(PINB,Copy_DIOPin_tPINn);
    10d0:	e6 e3       	ldi	r30, 0x36	; 54
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	28 2f       	mov	r18, r24
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	8b 81       	ldd	r24, Y+3	; 0x03
    10dc:	88 2f       	mov	r24, r24
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	a9 01       	movw	r20, r18
    10e2:	02 c0       	rjmp	.+4      	; 0x10e8 <MCAL_DIO_u8ReadPin+0x9e>
    10e4:	55 95       	asr	r21
    10e6:	47 95       	ror	r20
    10e8:	8a 95       	dec	r24
    10ea:	e2 f7       	brpl	.-8      	; 0x10e4 <MCAL_DIO_u8ReadPin+0x9a>
    10ec:	ca 01       	movw	r24, r20
    10ee:	81 70       	andi	r24, 0x01	; 1
    10f0:	89 83       	std	Y+1, r24	; 0x01
    10f2:	23 c0       	rjmp	.+70     	; 0x113a <MCAL_DIO_u8ReadPin+0xf0>
					break;
				case DIOC:			/* PORTC */
					pinValue = GET_BIT(PINC,Copy_DIOPin_tPINn);
    10f4:	e3 e3       	ldi	r30, 0x33	; 51
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	28 2f       	mov	r18, r24
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1100:	88 2f       	mov	r24, r24
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	a9 01       	movw	r20, r18
    1106:	02 c0       	rjmp	.+4      	; 0x110c <MCAL_DIO_u8ReadPin+0xc2>
    1108:	55 95       	asr	r21
    110a:	47 95       	ror	r20
    110c:	8a 95       	dec	r24
    110e:	e2 f7       	brpl	.-8      	; 0x1108 <MCAL_DIO_u8ReadPin+0xbe>
    1110:	ca 01       	movw	r24, r20
    1112:	81 70       	andi	r24, 0x01	; 1
    1114:	89 83       	std	Y+1, r24	; 0x01
    1116:	11 c0       	rjmp	.+34     	; 0x113a <MCAL_DIO_u8ReadPin+0xf0>
					break;
				case DIOD:			/* PORTD */
					pinValue = GET_BIT(PIND,Copy_DIOPin_tPINn);
    1118:	e0 e3       	ldi	r30, 0x30	; 48
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	28 2f       	mov	r18, r24
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	8b 81       	ldd	r24, Y+3	; 0x03
    1124:	88 2f       	mov	r24, r24
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	a9 01       	movw	r20, r18
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <MCAL_DIO_u8ReadPin+0xe6>
    112c:	55 95       	asr	r21
    112e:	47 95       	ror	r20
    1130:	8a 95       	dec	r24
    1132:	e2 f7       	brpl	.-8      	; 0x112c <MCAL_DIO_u8ReadPin+0xe2>
    1134:	ca 01       	movw	r24, r20
    1136:	81 70       	andi	r24, 0x01	; 1
    1138:	89 83       	std	Y+1, r24	; 0x01
					break;
			}
			return pinValue;
    113a:	59 81       	ldd	r21, Y+1	; 0x01
    113c:	5c 83       	std	Y+4, r21	; 0x04
    113e:	05 c0       	rjmp	.+10     	; 0x114a <MCAL_DIO_u8ReadPin+0x100>
		}
		else
		{
			//Error_Handler();
			return 0xFF;
    1140:	8f ef       	ldi	r24, 0xFF	; 255
    1142:	8c 83       	std	Y+4, r24	; 0x04
    1144:	02 c0       	rjmp	.+4      	; 0x114a <MCAL_DIO_u8ReadPin+0x100>
		}
	}
	else
	{
		//Error_Handler();
		return 0xFF;
    1146:	9f ef       	ldi	r25, 0xFF	; 255
    1148:	9c 83       	std	Y+4, r25	; 0x04
    114a:	8c 81       	ldd	r24, Y+4	; 0x04
	}
}
    114c:	26 96       	adiw	r28, 0x06	; 6
    114e:	0f b6       	in	r0, 0x3f	; 63
    1150:	f8 94       	cli
    1152:	de bf       	out	0x3e, r29	; 62
    1154:	0f be       	out	0x3f, r0	; 63
    1156:	cd bf       	out	0x3d, r28	; 61
    1158:	cf 91       	pop	r28
    115a:	df 91       	pop	r29
    115c:	08 95       	ret

0000115e <MCAL_DIO_voidWriteWord>:

/*
 * To write on the whole PROTx register
 */
void MCAL_DIO_voidWriteWord(DIOPort_t Copy_DIOPort_tDIOx, u8 Copy_u8Word)
{
    115e:	df 93       	push	r29
    1160:	cf 93       	push	r28
    1162:	00 d0       	rcall	.+0      	; 0x1164 <MCAL_DIO_voidWriteWord+0x6>
    1164:	00 d0       	rcall	.+0      	; 0x1166 <MCAL_DIO_voidWriteWord+0x8>
    1166:	cd b7       	in	r28, 0x3d	; 61
    1168:	de b7       	in	r29, 0x3e	; 62
    116a:	89 83       	std	Y+1, r24	; 0x01
    116c:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_DIOPort_tDIOx < 4)
    116e:	89 81       	ldd	r24, Y+1	; 0x01
    1170:	84 30       	cpi	r24, 0x04	; 4
    1172:	90 f5       	brcc	.+100    	; 0x11d8 <MCAL_DIO_voidWriteWord+0x7a>
	{
		switch(Copy_DIOPort_tDIOx)
    1174:	89 81       	ldd	r24, Y+1	; 0x01
    1176:	28 2f       	mov	r18, r24
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	3c 83       	std	Y+4, r19	; 0x04
    117c:	2b 83       	std	Y+3, r18	; 0x03
    117e:	8b 81       	ldd	r24, Y+3	; 0x03
    1180:	9c 81       	ldd	r25, Y+4	; 0x04
    1182:	81 30       	cpi	r24, 0x01	; 1
    1184:	91 05       	cpc	r25, r1
    1186:	d1 f0       	breq	.+52     	; 0x11bc <MCAL_DIO_voidWriteWord+0x5e>
    1188:	2b 81       	ldd	r18, Y+3	; 0x03
    118a:	3c 81       	ldd	r19, Y+4	; 0x04
    118c:	22 30       	cpi	r18, 0x02	; 2
    118e:	31 05       	cpc	r19, r1
    1190:	2c f4       	brge	.+10     	; 0x119c <MCAL_DIO_voidWriteWord+0x3e>
    1192:	8b 81       	ldd	r24, Y+3	; 0x03
    1194:	9c 81       	ldd	r25, Y+4	; 0x04
    1196:	00 97       	sbiw	r24, 0x00	; 0
    1198:	61 f0       	breq	.+24     	; 0x11b2 <MCAL_DIO_voidWriteWord+0x54>
    119a:	1e c0       	rjmp	.+60     	; 0x11d8 <MCAL_DIO_voidWriteWord+0x7a>
    119c:	2b 81       	ldd	r18, Y+3	; 0x03
    119e:	3c 81       	ldd	r19, Y+4	; 0x04
    11a0:	22 30       	cpi	r18, 0x02	; 2
    11a2:	31 05       	cpc	r19, r1
    11a4:	81 f0       	breq	.+32     	; 0x11c6 <MCAL_DIO_voidWriteWord+0x68>
    11a6:	8b 81       	ldd	r24, Y+3	; 0x03
    11a8:	9c 81       	ldd	r25, Y+4	; 0x04
    11aa:	83 30       	cpi	r24, 0x03	; 3
    11ac:	91 05       	cpc	r25, r1
    11ae:	81 f0       	breq	.+32     	; 0x11d0 <MCAL_DIO_voidWriteWord+0x72>
    11b0:	13 c0       	rjmp	.+38     	; 0x11d8 <MCAL_DIO_voidWriteWord+0x7a>
		{
			case DIOA:			/* PORTA */
				PORTA = Copy_u8Word;
    11b2:	eb e3       	ldi	r30, 0x3B	; 59
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	8a 81       	ldd	r24, Y+2	; 0x02
    11b8:	80 83       	st	Z, r24
    11ba:	0e c0       	rjmp	.+28     	; 0x11d8 <MCAL_DIO_voidWriteWord+0x7a>
				break;
			case DIOB:			/* PORTB */
				PORTB = Copy_u8Word;
    11bc:	e8 e3       	ldi	r30, 0x38	; 56
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	8a 81       	ldd	r24, Y+2	; 0x02
    11c2:	80 83       	st	Z, r24
    11c4:	09 c0       	rjmp	.+18     	; 0x11d8 <MCAL_DIO_voidWriteWord+0x7a>
				break;
			case DIOC:			/* PORTC */
				PORTC = Copy_u8Word;
    11c6:	e5 e3       	ldi	r30, 0x35	; 53
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	8a 81       	ldd	r24, Y+2	; 0x02
    11cc:	80 83       	st	Z, r24
    11ce:	04 c0       	rjmp	.+8      	; 0x11d8 <MCAL_DIO_voidWriteWord+0x7a>
				break;
			case DIOD:			/* PORTD */
				PORTD = Copy_u8Word;
    11d0:	e2 e3       	ldi	r30, 0x32	; 50
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	8a 81       	ldd	r24, Y+2	; 0x02
    11d6:	80 83       	st	Z, r24
				break;
		}
	}
}
    11d8:	0f 90       	pop	r0
    11da:	0f 90       	pop	r0
    11dc:	0f 90       	pop	r0
    11de:	0f 90       	pop	r0
    11e0:	cf 91       	pop	r28
    11e2:	df 91       	pop	r29
    11e4:	08 95       	ret

000011e6 <MCAL_DIO_u8WordRead>:

/*
 *  To read the whole PINx register
 */
u8 MCAL_DIO_u8WordRead(DIOPort_t Copy_DIOPort_tDIOx)
{
    11e6:	df 93       	push	r29
    11e8:	cf 93       	push	r28
    11ea:	00 d0       	rcall	.+0      	; 0x11ec <MCAL_DIO_u8WordRead+0x6>
    11ec:	00 d0       	rcall	.+0      	; 0x11ee <MCAL_DIO_u8WordRead+0x8>
    11ee:	0f 92       	push	r0
    11f0:	cd b7       	in	r28, 0x3d	; 61
    11f2:	de b7       	in	r29, 0x3e	; 62
    11f4:	8a 83       	std	Y+2, r24	; 0x02
	u8 portValue;
	if(Copy_DIOPort_tDIOx < 4)
    11f6:	8a 81       	ldd	r24, Y+2	; 0x02
    11f8:	84 30       	cpi	r24, 0x04	; 4
    11fa:	a8 f5       	brcc	.+106    	; 0x1266 <MCAL_DIO_u8WordRead+0x80>
	{
		switch(Copy_DIOPort_tDIOx)
    11fc:	8a 81       	ldd	r24, Y+2	; 0x02
    11fe:	28 2f       	mov	r18, r24
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	3d 83       	std	Y+5, r19	; 0x05
    1204:	2c 83       	std	Y+4, r18	; 0x04
    1206:	8c 81       	ldd	r24, Y+4	; 0x04
    1208:	9d 81       	ldd	r25, Y+5	; 0x05
    120a:	81 30       	cpi	r24, 0x01	; 1
    120c:	91 05       	cpc	r25, r1
    120e:	d1 f0       	breq	.+52     	; 0x1244 <MCAL_DIO_u8WordRead+0x5e>
    1210:	2c 81       	ldd	r18, Y+4	; 0x04
    1212:	3d 81       	ldd	r19, Y+5	; 0x05
    1214:	22 30       	cpi	r18, 0x02	; 2
    1216:	31 05       	cpc	r19, r1
    1218:	2c f4       	brge	.+10     	; 0x1224 <MCAL_DIO_u8WordRead+0x3e>
    121a:	8c 81       	ldd	r24, Y+4	; 0x04
    121c:	9d 81       	ldd	r25, Y+5	; 0x05
    121e:	00 97       	sbiw	r24, 0x00	; 0
    1220:	61 f0       	breq	.+24     	; 0x123a <MCAL_DIO_u8WordRead+0x54>
    1222:	1e c0       	rjmp	.+60     	; 0x1260 <MCAL_DIO_u8WordRead+0x7a>
    1224:	2c 81       	ldd	r18, Y+4	; 0x04
    1226:	3d 81       	ldd	r19, Y+5	; 0x05
    1228:	22 30       	cpi	r18, 0x02	; 2
    122a:	31 05       	cpc	r19, r1
    122c:	81 f0       	breq	.+32     	; 0x124e <MCAL_DIO_u8WordRead+0x68>
    122e:	8c 81       	ldd	r24, Y+4	; 0x04
    1230:	9d 81       	ldd	r25, Y+5	; 0x05
    1232:	83 30       	cpi	r24, 0x03	; 3
    1234:	91 05       	cpc	r25, r1
    1236:	81 f0       	breq	.+32     	; 0x1258 <MCAL_DIO_u8WordRead+0x72>
    1238:	13 c0       	rjmp	.+38     	; 0x1260 <MCAL_DIO_u8WordRead+0x7a>
		{
			case DIOA:			/* PORTA */
				portValue = PINA;
    123a:	e9 e3       	ldi	r30, 0x39	; 57
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	89 83       	std	Y+1, r24	; 0x01
    1242:	0e c0       	rjmp	.+28     	; 0x1260 <MCAL_DIO_u8WordRead+0x7a>
				break;
			case DIOB:			/* PORTB */
				portValue = PINB;
    1244:	e6 e3       	ldi	r30, 0x36	; 54
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	89 83       	std	Y+1, r24	; 0x01
    124c:	09 c0       	rjmp	.+18     	; 0x1260 <MCAL_DIO_u8WordRead+0x7a>
				break;
			case DIOC:			/* PORTC */
				portValue = PINC;
    124e:	e3 e3       	ldi	r30, 0x33	; 51
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	89 83       	std	Y+1, r24	; 0x01
    1256:	04 c0       	rjmp	.+8      	; 0x1260 <MCAL_DIO_u8WordRead+0x7a>
				break;
			case DIOD:			/* PORTD */
				portValue = PIND;
    1258:	e0 e3       	ldi	r30, 0x30	; 48
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	89 83       	std	Y+1, r24	; 0x01
				break;
			default:
				//No Code
				break;
		}
		return portValue;
    1260:	99 81       	ldd	r25, Y+1	; 0x01
    1262:	9b 83       	std	Y+3, r25	; 0x03
    1264:	01 c0       	rjmp	.+2      	; 0x1268 <MCAL_DIO_u8WordRead+0x82>
	}
	else
	{
		return 0;
    1266:	1b 82       	std	Y+3, r1	; 0x03
    1268:	8b 81       	ldd	r24, Y+3	; 0x03
	}
}
    126a:	0f 90       	pop	r0
    126c:	0f 90       	pop	r0
    126e:	0f 90       	pop	r0
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	cf 91       	pop	r28
    1276:	df 91       	pop	r29
    1278:	08 95       	ret

0000127a <MCAL_DIO_voidTogglePin>:

/*
 * To toggle a certain pin.
 */
void MCAL_DIO_voidTogglePin(DIOPort_t Copy_DIOPort_tDIOx, DIOPin_t Copy_DIOPin_tPINn)
{
    127a:	df 93       	push	r29
    127c:	cf 93       	push	r28
    127e:	00 d0       	rcall	.+0      	; 0x1280 <MCAL_DIO_voidTogglePin+0x6>
    1280:	00 d0       	rcall	.+0      	; 0x1282 <MCAL_DIO_voidTogglePin+0x8>
    1282:	cd b7       	in	r28, 0x3d	; 61
    1284:	de b7       	in	r29, 0x3e	; 62
    1286:	89 83       	std	Y+1, r24	; 0x01
    1288:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_DIOPort_tDIOx < 4)
    128a:	89 81       	ldd	r24, Y+1	; 0x01
    128c:	84 30       	cpi	r24, 0x04	; 4
    128e:	08 f0       	brcs	.+2      	; 0x1292 <MCAL_DIO_voidTogglePin+0x18>
    1290:	72 c0       	rjmp	.+228    	; 0x1376 <MCAL_DIO_voidTogglePin+0xfc>
	{
		if(Copy_DIOPin_tPINn < 8)
    1292:	8a 81       	ldd	r24, Y+2	; 0x02
    1294:	88 30       	cpi	r24, 0x08	; 8
    1296:	08 f0       	brcs	.+2      	; 0x129a <MCAL_DIO_voidTogglePin+0x20>
    1298:	6e c0       	rjmp	.+220    	; 0x1376 <MCAL_DIO_voidTogglePin+0xfc>
		{
			switch(Copy_DIOPort_tDIOx)
    129a:	89 81       	ldd	r24, Y+1	; 0x01
    129c:	28 2f       	mov	r18, r24
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	3c 83       	std	Y+4, r19	; 0x04
    12a2:	2b 83       	std	Y+3, r18	; 0x03
    12a4:	8b 81       	ldd	r24, Y+3	; 0x03
    12a6:	9c 81       	ldd	r25, Y+4	; 0x04
    12a8:	81 30       	cpi	r24, 0x01	; 1
    12aa:	91 05       	cpc	r25, r1
    12ac:	49 f1       	breq	.+82     	; 0x1300 <MCAL_DIO_voidTogglePin+0x86>
    12ae:	2b 81       	ldd	r18, Y+3	; 0x03
    12b0:	3c 81       	ldd	r19, Y+4	; 0x04
    12b2:	22 30       	cpi	r18, 0x02	; 2
    12b4:	31 05       	cpc	r19, r1
    12b6:	2c f4       	brge	.+10     	; 0x12c2 <MCAL_DIO_voidTogglePin+0x48>
    12b8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ba:	9c 81       	ldd	r25, Y+4	; 0x04
    12bc:	00 97       	sbiw	r24, 0x00	; 0
    12be:	61 f0       	breq	.+24     	; 0x12d8 <MCAL_DIO_voidTogglePin+0x5e>
    12c0:	5a c0       	rjmp	.+180    	; 0x1376 <MCAL_DIO_voidTogglePin+0xfc>
    12c2:	2b 81       	ldd	r18, Y+3	; 0x03
    12c4:	3c 81       	ldd	r19, Y+4	; 0x04
    12c6:	22 30       	cpi	r18, 0x02	; 2
    12c8:	31 05       	cpc	r19, r1
    12ca:	71 f1       	breq	.+92     	; 0x1328 <MCAL_DIO_voidTogglePin+0xae>
    12cc:	8b 81       	ldd	r24, Y+3	; 0x03
    12ce:	9c 81       	ldd	r25, Y+4	; 0x04
    12d0:	83 30       	cpi	r24, 0x03	; 3
    12d2:	91 05       	cpc	r25, r1
    12d4:	e9 f1       	breq	.+122    	; 0x1350 <MCAL_DIO_voidTogglePin+0xd6>
    12d6:	4f c0       	rjmp	.+158    	; 0x1376 <MCAL_DIO_voidTogglePin+0xfc>
			{
				case DIOA:			/* PORTA */
					TOG_BIT(PORTA,Copy_DIOPin_tPINn);
    12d8:	ab e3       	ldi	r26, 0x3B	; 59
    12da:	b0 e0       	ldi	r27, 0x00	; 0
    12dc:	eb e3       	ldi	r30, 0x3B	; 59
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z
    12e2:	48 2f       	mov	r20, r24
    12e4:	8a 81       	ldd	r24, Y+2	; 0x02
    12e6:	28 2f       	mov	r18, r24
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	02 2e       	mov	r0, r18
    12f0:	02 c0       	rjmp	.+4      	; 0x12f6 <MCAL_DIO_voidTogglePin+0x7c>
    12f2:	88 0f       	add	r24, r24
    12f4:	99 1f       	adc	r25, r25
    12f6:	0a 94       	dec	r0
    12f8:	e2 f7       	brpl	.-8      	; 0x12f2 <MCAL_DIO_voidTogglePin+0x78>
    12fa:	84 27       	eor	r24, r20
    12fc:	8c 93       	st	X, r24
    12fe:	3b c0       	rjmp	.+118    	; 0x1376 <MCAL_DIO_voidTogglePin+0xfc>
					break;
				case DIOB:			/* PORTB */
					TOG_BIT(PORTB,Copy_DIOPin_tPINn);
    1300:	a8 e3       	ldi	r26, 0x38	; 56
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	e8 e3       	ldi	r30, 0x38	; 56
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	48 2f       	mov	r20, r24
    130c:	8a 81       	ldd	r24, Y+2	; 0x02
    130e:	28 2f       	mov	r18, r24
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	02 2e       	mov	r0, r18
    1318:	02 c0       	rjmp	.+4      	; 0x131e <MCAL_DIO_voidTogglePin+0xa4>
    131a:	88 0f       	add	r24, r24
    131c:	99 1f       	adc	r25, r25
    131e:	0a 94       	dec	r0
    1320:	e2 f7       	brpl	.-8      	; 0x131a <MCAL_DIO_voidTogglePin+0xa0>
    1322:	84 27       	eor	r24, r20
    1324:	8c 93       	st	X, r24
    1326:	27 c0       	rjmp	.+78     	; 0x1376 <MCAL_DIO_voidTogglePin+0xfc>
					break;
				case DIOC:			/* PORTC */
					TOG_BIT(PORTC,Copy_DIOPin_tPINn);
    1328:	a5 e3       	ldi	r26, 0x35	; 53
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	e5 e3       	ldi	r30, 0x35	; 53
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	48 2f       	mov	r20, r24
    1334:	8a 81       	ldd	r24, Y+2	; 0x02
    1336:	28 2f       	mov	r18, r24
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	02 2e       	mov	r0, r18
    1340:	02 c0       	rjmp	.+4      	; 0x1346 <MCAL_DIO_voidTogglePin+0xcc>
    1342:	88 0f       	add	r24, r24
    1344:	99 1f       	adc	r25, r25
    1346:	0a 94       	dec	r0
    1348:	e2 f7       	brpl	.-8      	; 0x1342 <MCAL_DIO_voidTogglePin+0xc8>
    134a:	84 27       	eor	r24, r20
    134c:	8c 93       	st	X, r24
    134e:	13 c0       	rjmp	.+38     	; 0x1376 <MCAL_DIO_voidTogglePin+0xfc>
					break;
				case DIOD:			/* PORTD */
					TOG_BIT(PORTD,Copy_DIOPin_tPINn);
    1350:	a2 e3       	ldi	r26, 0x32	; 50
    1352:	b0 e0       	ldi	r27, 0x00	; 0
    1354:	e2 e3       	ldi	r30, 0x32	; 50
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	48 2f       	mov	r20, r24
    135c:	8a 81       	ldd	r24, Y+2	; 0x02
    135e:	28 2f       	mov	r18, r24
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	02 2e       	mov	r0, r18
    1368:	02 c0       	rjmp	.+4      	; 0x136e <MCAL_DIO_voidTogglePin+0xf4>
    136a:	88 0f       	add	r24, r24
    136c:	99 1f       	adc	r25, r25
    136e:	0a 94       	dec	r0
    1370:	e2 f7       	brpl	.-8      	; 0x136a <MCAL_DIO_voidTogglePin+0xf0>
    1372:	84 27       	eor	r24, r20
    1374:	8c 93       	st	X, r24
	}
	else
	{
		//Error_Handler();
	}
}
    1376:	0f 90       	pop	r0
    1378:	0f 90       	pop	r0
    137a:	0f 90       	pop	r0
    137c:	0f 90       	pop	r0
    137e:	cf 91       	pop	r28
    1380:	df 91       	pop	r29
    1382:	08 95       	ret

00001384 <MCAL_DIO_voidTogglePort>:

/*
 * To toggle a complete port register.
 */
void MCAL_DIO_voidTogglePort(DIOPort_t Copy_DIOPort_tDIOx)
{
    1384:	df 93       	push	r29
    1386:	cf 93       	push	r28
    1388:	00 d0       	rcall	.+0      	; 0x138a <MCAL_DIO_voidTogglePort+0x6>
    138a:	0f 92       	push	r0
    138c:	cd b7       	in	r28, 0x3d	; 61
    138e:	de b7       	in	r29, 0x3e	; 62
    1390:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_DIOPort_tDIOx < 4)
    1392:	89 81       	ldd	r24, Y+1	; 0x01
    1394:	84 30       	cpi	r24, 0x04	; 4
    1396:	08 f0       	brcs	.+2      	; 0x139a <MCAL_DIO_voidTogglePort+0x16>
    1398:	3e c0       	rjmp	.+124    	; 0x1416 <MCAL_DIO_voidTogglePort+0x92>
	{
		switch(Copy_DIOPort_tDIOx)
    139a:	89 81       	ldd	r24, Y+1	; 0x01
    139c:	28 2f       	mov	r18, r24
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	3b 83       	std	Y+3, r19	; 0x03
    13a2:	2a 83       	std	Y+2, r18	; 0x02
    13a4:	8a 81       	ldd	r24, Y+2	; 0x02
    13a6:	9b 81       	ldd	r25, Y+3	; 0x03
    13a8:	81 30       	cpi	r24, 0x01	; 1
    13aa:	91 05       	cpc	r25, r1
    13ac:	e9 f0       	breq	.+58     	; 0x13e8 <MCAL_DIO_voidTogglePort+0x64>
    13ae:	2a 81       	ldd	r18, Y+2	; 0x02
    13b0:	3b 81       	ldd	r19, Y+3	; 0x03
    13b2:	22 30       	cpi	r18, 0x02	; 2
    13b4:	31 05       	cpc	r19, r1
    13b6:	2c f4       	brge	.+10     	; 0x13c2 <MCAL_DIO_voidTogglePort+0x3e>
    13b8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ba:	9b 81       	ldd	r25, Y+3	; 0x03
    13bc:	00 97       	sbiw	r24, 0x00	; 0
    13be:	61 f0       	breq	.+24     	; 0x13d8 <MCAL_DIO_voidTogglePort+0x54>
    13c0:	2a c0       	rjmp	.+84     	; 0x1416 <MCAL_DIO_voidTogglePort+0x92>
    13c2:	2a 81       	ldd	r18, Y+2	; 0x02
    13c4:	3b 81       	ldd	r19, Y+3	; 0x03
    13c6:	22 30       	cpi	r18, 0x02	; 2
    13c8:	31 05       	cpc	r19, r1
    13ca:	b1 f0       	breq	.+44     	; 0x13f8 <MCAL_DIO_voidTogglePort+0x74>
    13cc:	8a 81       	ldd	r24, Y+2	; 0x02
    13ce:	9b 81       	ldd	r25, Y+3	; 0x03
    13d0:	83 30       	cpi	r24, 0x03	; 3
    13d2:	91 05       	cpc	r25, r1
    13d4:	c9 f0       	breq	.+50     	; 0x1408 <MCAL_DIO_voidTogglePort+0x84>
    13d6:	1f c0       	rjmp	.+62     	; 0x1416 <MCAL_DIO_voidTogglePort+0x92>
		{
			case DIOA:			/* PORTA */
				PORTA ^= 0xFF;
    13d8:	ab e3       	ldi	r26, 0x3B	; 59
    13da:	b0 e0       	ldi	r27, 0x00	; 0
    13dc:	eb e3       	ldi	r30, 0x3B	; 59
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	80 81       	ld	r24, Z
    13e2:	80 95       	com	r24
    13e4:	8c 93       	st	X, r24
    13e6:	17 c0       	rjmp	.+46     	; 0x1416 <MCAL_DIO_voidTogglePort+0x92>
				break;
			case DIOB:			/* PORTB */
				PORTB ^= 0xFF;
    13e8:	a8 e3       	ldi	r26, 0x38	; 56
    13ea:	b0 e0       	ldi	r27, 0x00	; 0
    13ec:	e8 e3       	ldi	r30, 0x38	; 56
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	80 95       	com	r24
    13f4:	8c 93       	st	X, r24
    13f6:	0f c0       	rjmp	.+30     	; 0x1416 <MCAL_DIO_voidTogglePort+0x92>
				break;
			case DIOC:			/* PORTC */
				PORTC ^= 0xFF;
    13f8:	a5 e3       	ldi	r26, 0x35	; 53
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	e5 e3       	ldi	r30, 0x35	; 53
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	80 95       	com	r24
    1404:	8c 93       	st	X, r24
    1406:	07 c0       	rjmp	.+14     	; 0x1416 <MCAL_DIO_voidTogglePort+0x92>
				break;
			case DIOD:			/* PORTD */
				PORTD ^= 0xFF;
    1408:	a2 e3       	ldi	r26, 0x32	; 50
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	e2 e3       	ldi	r30, 0x32	; 50
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	80 95       	com	r24
    1414:	8c 93       	st	X, r24
	}
	else
	{
		//Error_Handler();
	}
}
    1416:	0f 90       	pop	r0
    1418:	0f 90       	pop	r0
    141a:	0f 90       	pop	r0
    141c:	cf 91       	pop	r28
    141e:	df 91       	pop	r29
    1420:	08 95       	ret

00001422 <HAL_SEVEN_SEG_voidDisplay>:



/** ================ Seven Segment Functions Implementation ================= */
void HAL_SEVEN_SEG_voidDisplay(COM_t Copy_COM_tCOMn, u8 Copy_u8BCDNumber)
{
    1422:	df 93       	push	r29
    1424:	cf 93       	push	r28
    1426:	00 d0       	rcall	.+0      	; 0x1428 <HAL_SEVEN_SEG_voidDisplay+0x6>
    1428:	00 d0       	rcall	.+0      	; 0x142a <HAL_SEVEN_SEG_voidDisplay+0x8>
    142a:	cd b7       	in	r28, 0x3d	; 61
    142c:	de b7       	in	r29, 0x3e	; 62
    142e:	89 83       	std	Y+1, r24	; 0x01
    1430:	6a 83       	std	Y+2, r22	; 0x02
	/* Switch for the COMMON Anode selected to turn on */
	switch(Copy_COM_tCOMn)
    1432:	89 81       	ldd	r24, Y+1	; 0x01
    1434:	28 2f       	mov	r18, r24
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	3c 83       	std	Y+4, r19	; 0x04
    143a:	2b 83       	std	Y+3, r18	; 0x03
    143c:	8b 81       	ldd	r24, Y+3	; 0x03
    143e:	9c 81       	ldd	r25, Y+4	; 0x04
    1440:	81 30       	cpi	r24, 0x01	; 1
    1442:	91 05       	cpc	r25, r1
    1444:	d9 f0       	breq	.+54     	; 0x147c <HAL_SEVEN_SEG_voidDisplay+0x5a>
    1446:	2b 81       	ldd	r18, Y+3	; 0x03
    1448:	3c 81       	ldd	r19, Y+4	; 0x04
    144a:	22 30       	cpi	r18, 0x02	; 2
    144c:	31 05       	cpc	r19, r1
    144e:	2c f4       	brge	.+10     	; 0x145a <HAL_SEVEN_SEG_voidDisplay+0x38>
    1450:	8b 81       	ldd	r24, Y+3	; 0x03
    1452:	9c 81       	ldd	r25, Y+4	; 0x04
    1454:	00 97       	sbiw	r24, 0x00	; 0
    1456:	61 f0       	breq	.+24     	; 0x1470 <HAL_SEVEN_SEG_voidDisplay+0x4e>
    1458:	22 c0       	rjmp	.+68     	; 0x149e <HAL_SEVEN_SEG_voidDisplay+0x7c>
    145a:	2b 81       	ldd	r18, Y+3	; 0x03
    145c:	3c 81       	ldd	r19, Y+4	; 0x04
    145e:	22 30       	cpi	r18, 0x02	; 2
    1460:	31 05       	cpc	r19, r1
    1462:	91 f0       	breq	.+36     	; 0x1488 <HAL_SEVEN_SEG_voidDisplay+0x66>
    1464:	8b 81       	ldd	r24, Y+3	; 0x03
    1466:	9c 81       	ldd	r25, Y+4	; 0x04
    1468:	83 30       	cpi	r24, 0x03	; 3
    146a:	91 05       	cpc	r25, r1
    146c:	99 f0       	breq	.+38     	; 0x1494 <HAL_SEVEN_SEG_voidDisplay+0x72>
    146e:	17 c0       	rjmp	.+46     	; 0x149e <HAL_SEVEN_SEG_voidDisplay+0x7c>
	{
		case COM1:
			MCAL_DIO_voidWritePin(DIOA,PIN3,Low);
    1470:	80 e0       	ldi	r24, 0x00	; 0
    1472:	63 e0       	ldi	r22, 0x03	; 3
    1474:	40 e0       	ldi	r20, 0x00	; 0
    1476:	0e 94 3a 07 	call	0xe74	; 0xe74 <MCAL_DIO_voidWritePin>
    147a:	11 c0       	rjmp	.+34     	; 0x149e <HAL_SEVEN_SEG_voidDisplay+0x7c>
			break;
		case COM2:
			MCAL_DIO_voidWritePin(DIOA,PIN2,Low);
    147c:	80 e0       	ldi	r24, 0x00	; 0
    147e:	62 e0       	ldi	r22, 0x02	; 2
    1480:	40 e0       	ldi	r20, 0x00	; 0
    1482:	0e 94 3a 07 	call	0xe74	; 0xe74 <MCAL_DIO_voidWritePin>
    1486:	0b c0       	rjmp	.+22     	; 0x149e <HAL_SEVEN_SEG_voidDisplay+0x7c>
			break;
		case COM3:
			MCAL_DIO_voidWritePin(DIOB,PIN5,Low);
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	65 e0       	ldi	r22, 0x05	; 5
    148c:	40 e0       	ldi	r20, 0x00	; 0
    148e:	0e 94 3a 07 	call	0xe74	; 0xe74 <MCAL_DIO_voidWritePin>
    1492:	05 c0       	rjmp	.+10     	; 0x149e <HAL_SEVEN_SEG_voidDisplay+0x7c>
			break;
		case COM4:
			MCAL_DIO_voidWritePin(DIOB,PIN6,Low);
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	66 e0       	ldi	r22, 0x06	; 6
    1498:	40 e0       	ldi	r20, 0x00	; 0
    149a:	0e 94 3a 07 	call	0xe74	; 0xe74 <MCAL_DIO_voidWritePin>
		default:
			break;
	}

	/* Assign the A, B, C, and D pins to the given BCD number */
	MCAL_DIO_voidWritePin(DIOB, PIN0, GET_BIT(Copy_u8BCDNumber,0)); // A
    149e:	8a 81       	ldd	r24, Y+2	; 0x02
    14a0:	98 2f       	mov	r25, r24
    14a2:	91 70       	andi	r25, 0x01	; 1
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	60 e0       	ldi	r22, 0x00	; 0
    14a8:	49 2f       	mov	r20, r25
    14aa:	0e 94 3a 07 	call	0xe74	; 0xe74 <MCAL_DIO_voidWritePin>
	MCAL_DIO_voidWritePin(DIOB, PIN1, GET_BIT(Copy_u8BCDNumber,1)); // B
    14ae:	8a 81       	ldd	r24, Y+2	; 0x02
    14b0:	86 95       	lsr	r24
    14b2:	98 2f       	mov	r25, r24
    14b4:	91 70       	andi	r25, 0x01	; 1
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	61 e0       	ldi	r22, 0x01	; 1
    14ba:	49 2f       	mov	r20, r25
    14bc:	0e 94 3a 07 	call	0xe74	; 0xe74 <MCAL_DIO_voidWritePin>
	MCAL_DIO_voidWritePin(DIOB, PIN2, GET_BIT(Copy_u8BCDNumber,2)); // C
    14c0:	8a 81       	ldd	r24, Y+2	; 0x02
    14c2:	86 95       	lsr	r24
    14c4:	86 95       	lsr	r24
    14c6:	98 2f       	mov	r25, r24
    14c8:	91 70       	andi	r25, 0x01	; 1
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	62 e0       	ldi	r22, 0x02	; 2
    14ce:	49 2f       	mov	r20, r25
    14d0:	0e 94 3a 07 	call	0xe74	; 0xe74 <MCAL_DIO_voidWritePin>
	MCAL_DIO_voidWritePin(DIOB, PIN4, GET_BIT(Copy_u8BCDNumber,3)); // D
    14d4:	8a 81       	ldd	r24, Y+2	; 0x02
    14d6:	86 95       	lsr	r24
    14d8:	86 95       	lsr	r24
    14da:	86 95       	lsr	r24
    14dc:	98 2f       	mov	r25, r24
    14de:	91 70       	andi	r25, 0x01	; 1
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	64 e0       	ldi	r22, 0x04	; 4
    14e4:	49 2f       	mov	r20, r25
    14e6:	0e 94 3a 07 	call	0xe74	; 0xe74 <MCAL_DIO_voidWritePin>
}
    14ea:	0f 90       	pop	r0
    14ec:	0f 90       	pop	r0
    14ee:	0f 90       	pop	r0
    14f0:	0f 90       	pop	r0
    14f2:	cf 91       	pop	r28
    14f4:	df 91       	pop	r29
    14f6:	08 95       	ret

000014f8 <HAL_LCD_Init>:

static u8 InitFinished = 0;


void HAL_LCD_Init()
{
    14f8:	0f 93       	push	r16
    14fa:	1f 93       	push	r17
    14fc:	df 93       	push	r29
    14fe:	cf 93       	push	r28
    1500:	cd b7       	in	r28, 0x3d	; 61
    1502:	de b7       	in	r29, 0x3e	; 62
    1504:	cc 54       	subi	r28, 0x4C	; 76
    1506:	d0 40       	sbci	r29, 0x00	; 0
    1508:	0f b6       	in	r0, 0x3f	; 63
    150a:	f8 94       	cli
    150c:	de bf       	out	0x3e, r29	; 62
    150e:	0f be       	out	0x3f, r0	; 63
    1510:	cd bf       	out	0x3d, r28	; 61
	// Configuring the LCD pins
	// ============================= //
	MCAL_DIO_voidSetPinMode(RS, Output);
    1512:	80 e0       	ldi	r24, 0x00	; 0
    1514:	63 e0       	ldi	r22, 0x03	; 3
    1516:	41 e0       	ldi	r20, 0x01	; 1
    1518:	0e 94 4f 06 	call	0xc9e	; 0xc9e <MCAL_DIO_voidSetPinMode>
	MCAL_DIO_voidSetPinMode(E  , Output);
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	62 e0       	ldi	r22, 0x02	; 2
    1520:	41 e0       	ldi	r20, 0x01	; 1
    1522:	0e 94 4f 06 	call	0xc9e	; 0xc9e <MCAL_DIO_voidSetPinMode>
	MCAL_DIO_voidSetPinMode(DB7, Output);
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	64 e0       	ldi	r22, 0x04	; 4
    152a:	41 e0       	ldi	r20, 0x01	; 1
    152c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <MCAL_DIO_voidSetPinMode>
	MCAL_DIO_voidSetPinMode(DB6, Output);
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	62 e0       	ldi	r22, 0x02	; 2
    1534:	41 e0       	ldi	r20, 0x01	; 1
    1536:	0e 94 4f 06 	call	0xc9e	; 0xc9e <MCAL_DIO_voidSetPinMode>
	MCAL_DIO_voidSetPinMode(DB5, Output);
    153a:	81 e0       	ldi	r24, 0x01	; 1
    153c:	61 e0       	ldi	r22, 0x01	; 1
    153e:	41 e0       	ldi	r20, 0x01	; 1
    1540:	0e 94 4f 06 	call	0xc9e	; 0xc9e <MCAL_DIO_voidSetPinMode>
	MCAL_DIO_voidSetPinMode(DB4, Output);
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	60 e0       	ldi	r22, 0x00	; 0
    1548:	41 e0       	ldi	r20, 0x01	; 1
    154a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <MCAL_DIO_voidSetPinMode>
    154e:	fe 01       	movw	r30, r28
    1550:	e7 5b       	subi	r30, 0xB7	; 183
    1552:	ff 4f       	sbci	r31, 0xFF	; 255
    1554:	80 e0       	ldi	r24, 0x00	; 0
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	a8 ef       	ldi	r26, 0xF8	; 248
    155a:	b1 e4       	ldi	r27, 0x41	; 65
    155c:	80 83       	st	Z, r24
    155e:	91 83       	std	Z+1, r25	; 0x01
    1560:	a2 83       	std	Z+2, r26	; 0x02
    1562:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1564:	8e 01       	movw	r16, r28
    1566:	0b 5b       	subi	r16, 0xBB	; 187
    1568:	1f 4f       	sbci	r17, 0xFF	; 255
    156a:	fe 01       	movw	r30, r28
    156c:	e7 5b       	subi	r30, 0xB7	; 183
    156e:	ff 4f       	sbci	r31, 0xFF	; 255
    1570:	60 81       	ld	r22, Z
    1572:	71 81       	ldd	r23, Z+1	; 0x01
    1574:	82 81       	ldd	r24, Z+2	; 0x02
    1576:	93 81       	ldd	r25, Z+3	; 0x03
    1578:	20 e0       	ldi	r18, 0x00	; 0
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	4a e7       	ldi	r20, 0x7A	; 122
    157e:	55 e4       	ldi	r21, 0x45	; 69
    1580:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1584:	dc 01       	movw	r26, r24
    1586:	cb 01       	movw	r24, r22
    1588:	f8 01       	movw	r30, r16
    158a:	80 83       	st	Z, r24
    158c:	91 83       	std	Z+1, r25	; 0x01
    158e:	a2 83       	std	Z+2, r26	; 0x02
    1590:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1592:	fe 01       	movw	r30, r28
    1594:	eb 5b       	subi	r30, 0xBB	; 187
    1596:	ff 4f       	sbci	r31, 0xFF	; 255
    1598:	60 81       	ld	r22, Z
    159a:	71 81       	ldd	r23, Z+1	; 0x01
    159c:	82 81       	ldd	r24, Z+2	; 0x02
    159e:	93 81       	ldd	r25, Z+3	; 0x03
    15a0:	20 e0       	ldi	r18, 0x00	; 0
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	40 e8       	ldi	r20, 0x80	; 128
    15a6:	5f e3       	ldi	r21, 0x3F	; 63
    15a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15ac:	88 23       	and	r24, r24
    15ae:	44 f4       	brge	.+16     	; 0x15c0 <HAL_LCD_Init+0xc8>
		__ticks = 1;
    15b0:	fe 01       	movw	r30, r28
    15b2:	ed 5b       	subi	r30, 0xBD	; 189
    15b4:	ff 4f       	sbci	r31, 0xFF	; 255
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	91 83       	std	Z+1, r25	; 0x01
    15bc:	80 83       	st	Z, r24
    15be:	64 c0       	rjmp	.+200    	; 0x1688 <HAL_LCD_Init+0x190>
	else if (__tmp > 65535)
    15c0:	fe 01       	movw	r30, r28
    15c2:	eb 5b       	subi	r30, 0xBB	; 187
    15c4:	ff 4f       	sbci	r31, 0xFF	; 255
    15c6:	60 81       	ld	r22, Z
    15c8:	71 81       	ldd	r23, Z+1	; 0x01
    15ca:	82 81       	ldd	r24, Z+2	; 0x02
    15cc:	93 81       	ldd	r25, Z+3	; 0x03
    15ce:	20 e0       	ldi	r18, 0x00	; 0
    15d0:	3f ef       	ldi	r19, 0xFF	; 255
    15d2:	4f e7       	ldi	r20, 0x7F	; 127
    15d4:	57 e4       	ldi	r21, 0x47	; 71
    15d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15da:	18 16       	cp	r1, r24
    15dc:	0c f0       	brlt	.+2      	; 0x15e0 <HAL_LCD_Init+0xe8>
    15de:	43 c0       	rjmp	.+134    	; 0x1666 <HAL_LCD_Init+0x16e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15e0:	fe 01       	movw	r30, r28
    15e2:	e7 5b       	subi	r30, 0xB7	; 183
    15e4:	ff 4f       	sbci	r31, 0xFF	; 255
    15e6:	60 81       	ld	r22, Z
    15e8:	71 81       	ldd	r23, Z+1	; 0x01
    15ea:	82 81       	ldd	r24, Z+2	; 0x02
    15ec:	93 81       	ldd	r25, Z+3	; 0x03
    15ee:	20 e0       	ldi	r18, 0x00	; 0
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	40 e2       	ldi	r20, 0x20	; 32
    15f4:	51 e4       	ldi	r21, 0x41	; 65
    15f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15fa:	dc 01       	movw	r26, r24
    15fc:	cb 01       	movw	r24, r22
    15fe:	8e 01       	movw	r16, r28
    1600:	0d 5b       	subi	r16, 0xBD	; 189
    1602:	1f 4f       	sbci	r17, 0xFF	; 255
    1604:	bc 01       	movw	r22, r24
    1606:	cd 01       	movw	r24, r26
    1608:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    160c:	dc 01       	movw	r26, r24
    160e:	cb 01       	movw	r24, r22
    1610:	f8 01       	movw	r30, r16
    1612:	91 83       	std	Z+1, r25	; 0x01
    1614:	80 83       	st	Z, r24
    1616:	1f c0       	rjmp	.+62     	; 0x1656 <HAL_LCD_Init+0x15e>
    1618:	fe 01       	movw	r30, r28
    161a:	ef 5b       	subi	r30, 0xBF	; 191
    161c:	ff 4f       	sbci	r31, 0xFF	; 255
    161e:	80 e9       	ldi	r24, 0x90	; 144
    1620:	91 e0       	ldi	r25, 0x01	; 1
    1622:	91 83       	std	Z+1, r25	; 0x01
    1624:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1626:	fe 01       	movw	r30, r28
    1628:	ef 5b       	subi	r30, 0xBF	; 191
    162a:	ff 4f       	sbci	r31, 0xFF	; 255
    162c:	80 81       	ld	r24, Z
    162e:	91 81       	ldd	r25, Z+1	; 0x01
    1630:	01 97       	sbiw	r24, 0x01	; 1
    1632:	f1 f7       	brne	.-4      	; 0x1630 <HAL_LCD_Init+0x138>
    1634:	fe 01       	movw	r30, r28
    1636:	ef 5b       	subi	r30, 0xBF	; 191
    1638:	ff 4f       	sbci	r31, 0xFF	; 255
    163a:	91 83       	std	Z+1, r25	; 0x01
    163c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    163e:	de 01       	movw	r26, r28
    1640:	ad 5b       	subi	r26, 0xBD	; 189
    1642:	bf 4f       	sbci	r27, 0xFF	; 255
    1644:	fe 01       	movw	r30, r28
    1646:	ed 5b       	subi	r30, 0xBD	; 189
    1648:	ff 4f       	sbci	r31, 0xFF	; 255
    164a:	80 81       	ld	r24, Z
    164c:	91 81       	ldd	r25, Z+1	; 0x01
    164e:	01 97       	sbiw	r24, 0x01	; 1
    1650:	11 96       	adiw	r26, 0x01	; 1
    1652:	9c 93       	st	X, r25
    1654:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1656:	fe 01       	movw	r30, r28
    1658:	ed 5b       	subi	r30, 0xBD	; 189
    165a:	ff 4f       	sbci	r31, 0xFF	; 255
    165c:	80 81       	ld	r24, Z
    165e:	91 81       	ldd	r25, Z+1	; 0x01
    1660:	00 97       	sbiw	r24, 0x00	; 0
    1662:	d1 f6       	brne	.-76     	; 0x1618 <HAL_LCD_Init+0x120>
    1664:	24 c0       	rjmp	.+72     	; 0x16ae <HAL_LCD_Init+0x1b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1666:	8e 01       	movw	r16, r28
    1668:	0d 5b       	subi	r16, 0xBD	; 189
    166a:	1f 4f       	sbci	r17, 0xFF	; 255
    166c:	fe 01       	movw	r30, r28
    166e:	eb 5b       	subi	r30, 0xBB	; 187
    1670:	ff 4f       	sbci	r31, 0xFF	; 255
    1672:	60 81       	ld	r22, Z
    1674:	71 81       	ldd	r23, Z+1	; 0x01
    1676:	82 81       	ldd	r24, Z+2	; 0x02
    1678:	93 81       	ldd	r25, Z+3	; 0x03
    167a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    167e:	dc 01       	movw	r26, r24
    1680:	cb 01       	movw	r24, r22
    1682:	f8 01       	movw	r30, r16
    1684:	91 83       	std	Z+1, r25	; 0x01
    1686:	80 83       	st	Z, r24
    1688:	fe 01       	movw	r30, r28
    168a:	ed 5b       	subi	r30, 0xBD	; 189
    168c:	ff 4f       	sbci	r31, 0xFF	; 255
    168e:	80 81       	ld	r24, Z
    1690:	91 81       	ldd	r25, Z+1	; 0x01
    1692:	fe 01       	movw	r30, r28
    1694:	ff 96       	adiw	r30, 0x3f	; 63
    1696:	91 83       	std	Z+1, r25	; 0x01
    1698:	80 83       	st	Z, r24
    169a:	fe 01       	movw	r30, r28
    169c:	ff 96       	adiw	r30, 0x3f	; 63
    169e:	80 81       	ld	r24, Z
    16a0:	91 81       	ldd	r25, Z+1	; 0x01
    16a2:	01 97       	sbiw	r24, 0x01	; 1
    16a4:	f1 f7       	brne	.-4      	; 0x16a2 <HAL_LCD_Init+0x1aa>
    16a6:	fe 01       	movw	r30, r28
    16a8:	ff 96       	adiw	r30, 0x3f	; 63
    16aa:	91 83       	std	Z+1, r25	; 0x01
    16ac:	80 83       	st	Z, r24

	// LCD software initializations:

	_delay_ms(31);

	HAL_LCD_SendCommand(0x20);
    16ae:	80 e2       	ldi	r24, 0x20	; 32
    16b0:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <HAL_LCD_SendCommand>
	HAL_LCD_SendCommand(0x20);
    16b4:	80 e2       	ldi	r24, 0x20	; 32
    16b6:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <HAL_LCD_SendCommand>
	HAL_LCD_SendCommand(0x80);
    16ba:	80 e8       	ldi	r24, 0x80	; 128
    16bc:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <HAL_LCD_SendCommand>
    16c0:	80 e0       	ldi	r24, 0x00	; 0
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	a0 e2       	ldi	r26, 0x20	; 32
    16c6:	b2 e4       	ldi	r27, 0x42	; 66
    16c8:	8b af       	std	Y+59, r24	; 0x3b
    16ca:	9c af       	std	Y+60, r25	; 0x3c
    16cc:	ad af       	std	Y+61, r26	; 0x3d
    16ce:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    16d0:	6b ad       	ldd	r22, Y+59	; 0x3b
    16d2:	7c ad       	ldd	r23, Y+60	; 0x3c
    16d4:	8d ad       	ldd	r24, Y+61	; 0x3d
    16d6:	9e ad       	ldd	r25, Y+62	; 0x3e
    16d8:	2b ea       	ldi	r18, 0xAB	; 171
    16da:	3a ea       	ldi	r19, 0xAA	; 170
    16dc:	4a ea       	ldi	r20, 0xAA	; 170
    16de:	50 e4       	ldi	r21, 0x40	; 64
    16e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16e4:	dc 01       	movw	r26, r24
    16e6:	cb 01       	movw	r24, r22
    16e8:	8f ab       	std	Y+55, r24	; 0x37
    16ea:	98 af       	std	Y+56, r25	; 0x38
    16ec:	a9 af       	std	Y+57, r26	; 0x39
    16ee:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    16f0:	6f a9       	ldd	r22, Y+55	; 0x37
    16f2:	78 ad       	ldd	r23, Y+56	; 0x38
    16f4:	89 ad       	ldd	r24, Y+57	; 0x39
    16f6:	9a ad       	ldd	r25, Y+58	; 0x3a
    16f8:	20 e0       	ldi	r18, 0x00	; 0
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	40 e8       	ldi	r20, 0x80	; 128
    16fe:	5f e3       	ldi	r21, 0x3F	; 63
    1700:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1704:	88 23       	and	r24, r24
    1706:	1c f4       	brge	.+6      	; 0x170e <HAL_LCD_Init+0x216>
		__ticks = 1;
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	8e ab       	std	Y+54, r24	; 0x36
    170c:	91 c0       	rjmp	.+290    	; 0x1830 <HAL_LCD_Init+0x338>
	else if (__tmp > 255)
    170e:	6f a9       	ldd	r22, Y+55	; 0x37
    1710:	78 ad       	ldd	r23, Y+56	; 0x38
    1712:	89 ad       	ldd	r24, Y+57	; 0x39
    1714:	9a ad       	ldd	r25, Y+58	; 0x3a
    1716:	20 e0       	ldi	r18, 0x00	; 0
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	4f e7       	ldi	r20, 0x7F	; 127
    171c:	53 e4       	ldi	r21, 0x43	; 67
    171e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1722:	18 16       	cp	r1, r24
    1724:	0c f0       	brlt	.+2      	; 0x1728 <HAL_LCD_Init+0x230>
    1726:	7b c0       	rjmp	.+246    	; 0x181e <HAL_LCD_Init+0x326>
	{
		_delay_ms(__us / 1000.0);
    1728:	6b ad       	ldd	r22, Y+59	; 0x3b
    172a:	7c ad       	ldd	r23, Y+60	; 0x3c
    172c:	8d ad       	ldd	r24, Y+61	; 0x3d
    172e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1730:	20 e0       	ldi	r18, 0x00	; 0
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	4a e7       	ldi	r20, 0x7A	; 122
    1736:	54 e4       	ldi	r21, 0x44	; 68
    1738:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    173c:	dc 01       	movw	r26, r24
    173e:	cb 01       	movw	r24, r22
    1740:	8a ab       	std	Y+50, r24	; 0x32
    1742:	9b ab       	std	Y+51, r25	; 0x33
    1744:	ac ab       	std	Y+52, r26	; 0x34
    1746:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1748:	6a a9       	ldd	r22, Y+50	; 0x32
    174a:	7b a9       	ldd	r23, Y+51	; 0x33
    174c:	8c a9       	ldd	r24, Y+52	; 0x34
    174e:	9d a9       	ldd	r25, Y+53	; 0x35
    1750:	20 e0       	ldi	r18, 0x00	; 0
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	4a e7       	ldi	r20, 0x7A	; 122
    1756:	55 e4       	ldi	r21, 0x45	; 69
    1758:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    175c:	dc 01       	movw	r26, r24
    175e:	cb 01       	movw	r24, r22
    1760:	8e a7       	std	Y+46, r24	; 0x2e
    1762:	9f a7       	std	Y+47, r25	; 0x2f
    1764:	a8 ab       	std	Y+48, r26	; 0x30
    1766:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1768:	6e a5       	ldd	r22, Y+46	; 0x2e
    176a:	7f a5       	ldd	r23, Y+47	; 0x2f
    176c:	88 a9       	ldd	r24, Y+48	; 0x30
    176e:	99 a9       	ldd	r25, Y+49	; 0x31
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	40 e8       	ldi	r20, 0x80	; 128
    1776:	5f e3       	ldi	r21, 0x3F	; 63
    1778:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    177c:	88 23       	and	r24, r24
    177e:	2c f4       	brge	.+10     	; 0x178a <HAL_LCD_Init+0x292>
		__ticks = 1;
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	9d a7       	std	Y+45, r25	; 0x2d
    1786:	8c a7       	std	Y+44, r24	; 0x2c
    1788:	3f c0       	rjmp	.+126    	; 0x1808 <HAL_LCD_Init+0x310>
	else if (__tmp > 65535)
    178a:	6e a5       	ldd	r22, Y+46	; 0x2e
    178c:	7f a5       	ldd	r23, Y+47	; 0x2f
    178e:	88 a9       	ldd	r24, Y+48	; 0x30
    1790:	99 a9       	ldd	r25, Y+49	; 0x31
    1792:	20 e0       	ldi	r18, 0x00	; 0
    1794:	3f ef       	ldi	r19, 0xFF	; 255
    1796:	4f e7       	ldi	r20, 0x7F	; 127
    1798:	57 e4       	ldi	r21, 0x47	; 71
    179a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    179e:	18 16       	cp	r1, r24
    17a0:	4c f5       	brge	.+82     	; 0x17f4 <HAL_LCD_Init+0x2fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17a2:	6a a9       	ldd	r22, Y+50	; 0x32
    17a4:	7b a9       	ldd	r23, Y+51	; 0x33
    17a6:	8c a9       	ldd	r24, Y+52	; 0x34
    17a8:	9d a9       	ldd	r25, Y+53	; 0x35
    17aa:	20 e0       	ldi	r18, 0x00	; 0
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	40 e2       	ldi	r20, 0x20	; 32
    17b0:	51 e4       	ldi	r21, 0x41	; 65
    17b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17b6:	dc 01       	movw	r26, r24
    17b8:	cb 01       	movw	r24, r22
    17ba:	bc 01       	movw	r22, r24
    17bc:	cd 01       	movw	r24, r26
    17be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17c2:	dc 01       	movw	r26, r24
    17c4:	cb 01       	movw	r24, r22
    17c6:	9d a7       	std	Y+45, r25	; 0x2d
    17c8:	8c a7       	std	Y+44, r24	; 0x2c
    17ca:	0f c0       	rjmp	.+30     	; 0x17ea <HAL_LCD_Init+0x2f2>
    17cc:	80 e9       	ldi	r24, 0x90	; 144
    17ce:	91 e0       	ldi	r25, 0x01	; 1
    17d0:	9b a7       	std	Y+43, r25	; 0x2b
    17d2:	8a a7       	std	Y+42, r24	; 0x2a
    17d4:	8a a5       	ldd	r24, Y+42	; 0x2a
    17d6:	9b a5       	ldd	r25, Y+43	; 0x2b
    17d8:	01 97       	sbiw	r24, 0x01	; 1
    17da:	f1 f7       	brne	.-4      	; 0x17d8 <HAL_LCD_Init+0x2e0>
    17dc:	9b a7       	std	Y+43, r25	; 0x2b
    17de:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17e0:	8c a5       	ldd	r24, Y+44	; 0x2c
    17e2:	9d a5       	ldd	r25, Y+45	; 0x2d
    17e4:	01 97       	sbiw	r24, 0x01	; 1
    17e6:	9d a7       	std	Y+45, r25	; 0x2d
    17e8:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ea:	8c a5       	ldd	r24, Y+44	; 0x2c
    17ec:	9d a5       	ldd	r25, Y+45	; 0x2d
    17ee:	00 97       	sbiw	r24, 0x00	; 0
    17f0:	69 f7       	brne	.-38     	; 0x17cc <HAL_LCD_Init+0x2d4>
    17f2:	24 c0       	rjmp	.+72     	; 0x183c <HAL_LCD_Init+0x344>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17f4:	6e a5       	ldd	r22, Y+46	; 0x2e
    17f6:	7f a5       	ldd	r23, Y+47	; 0x2f
    17f8:	88 a9       	ldd	r24, Y+48	; 0x30
    17fa:	99 a9       	ldd	r25, Y+49	; 0x31
    17fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1800:	dc 01       	movw	r26, r24
    1802:	cb 01       	movw	r24, r22
    1804:	9d a7       	std	Y+45, r25	; 0x2d
    1806:	8c a7       	std	Y+44, r24	; 0x2c
    1808:	8c a5       	ldd	r24, Y+44	; 0x2c
    180a:	9d a5       	ldd	r25, Y+45	; 0x2d
    180c:	99 a7       	std	Y+41, r25	; 0x29
    180e:	88 a7       	std	Y+40, r24	; 0x28
    1810:	88 a5       	ldd	r24, Y+40	; 0x28
    1812:	99 a5       	ldd	r25, Y+41	; 0x29
    1814:	01 97       	sbiw	r24, 0x01	; 1
    1816:	f1 f7       	brne	.-4      	; 0x1814 <HAL_LCD_Init+0x31c>
    1818:	99 a7       	std	Y+41, r25	; 0x29
    181a:	88 a7       	std	Y+40, r24	; 0x28
    181c:	0f c0       	rjmp	.+30     	; 0x183c <HAL_LCD_Init+0x344>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    181e:	6f a9       	ldd	r22, Y+55	; 0x37
    1820:	78 ad       	ldd	r23, Y+56	; 0x38
    1822:	89 ad       	ldd	r24, Y+57	; 0x39
    1824:	9a ad       	ldd	r25, Y+58	; 0x3a
    1826:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    182a:	dc 01       	movw	r26, r24
    182c:	cb 01       	movw	r24, r22
    182e:	8e ab       	std	Y+54, r24	; 0x36
    1830:	8e a9       	ldd	r24, Y+54	; 0x36
    1832:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1834:	8f a1       	ldd	r24, Y+39	; 0x27
    1836:	8a 95       	dec	r24
    1838:	f1 f7       	brne	.-4      	; 0x1836 <HAL_LCD_Init+0x33e>
    183a:	8f a3       	std	Y+39, r24	; 0x27

	_delay_us(40);

	HAL_LCD_SendCommand(0x00);
    183c:	80 e0       	ldi	r24, 0x00	; 0
    183e:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <HAL_LCD_SendCommand>
	HAL_LCD_SendCommand(0xC0);
    1842:	80 ec       	ldi	r24, 0xC0	; 192
    1844:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <HAL_LCD_SendCommand>
    1848:	80 e0       	ldi	r24, 0x00	; 0
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	a0 e2       	ldi	r26, 0x20	; 32
    184e:	b2 e4       	ldi	r27, 0x42	; 66
    1850:	8b a3       	std	Y+35, r24	; 0x23
    1852:	9c a3       	std	Y+36, r25	; 0x24
    1854:	ad a3       	std	Y+37, r26	; 0x25
    1856:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1858:	6b a1       	ldd	r22, Y+35	; 0x23
    185a:	7c a1       	ldd	r23, Y+36	; 0x24
    185c:	8d a1       	ldd	r24, Y+37	; 0x25
    185e:	9e a1       	ldd	r25, Y+38	; 0x26
    1860:	2b ea       	ldi	r18, 0xAB	; 171
    1862:	3a ea       	ldi	r19, 0xAA	; 170
    1864:	4a ea       	ldi	r20, 0xAA	; 170
    1866:	50 e4       	ldi	r21, 0x40	; 64
    1868:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    186c:	dc 01       	movw	r26, r24
    186e:	cb 01       	movw	r24, r22
    1870:	8f 8f       	std	Y+31, r24	; 0x1f
    1872:	98 a3       	std	Y+32, r25	; 0x20
    1874:	a9 a3       	std	Y+33, r26	; 0x21
    1876:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1878:	6f 8d       	ldd	r22, Y+31	; 0x1f
    187a:	78 a1       	ldd	r23, Y+32	; 0x20
    187c:	89 a1       	ldd	r24, Y+33	; 0x21
    187e:	9a a1       	ldd	r25, Y+34	; 0x22
    1880:	20 e0       	ldi	r18, 0x00	; 0
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	40 e8       	ldi	r20, 0x80	; 128
    1886:	5f e3       	ldi	r21, 0x3F	; 63
    1888:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    188c:	88 23       	and	r24, r24
    188e:	1c f4       	brge	.+6      	; 0x1896 <HAL_LCD_Init+0x39e>
		__ticks = 1;
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	8e 8f       	std	Y+30, r24	; 0x1e
    1894:	91 c0       	rjmp	.+290    	; 0x19b8 <HAL_LCD_Init+0x4c0>
	else if (__tmp > 255)
    1896:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1898:	78 a1       	ldd	r23, Y+32	; 0x20
    189a:	89 a1       	ldd	r24, Y+33	; 0x21
    189c:	9a a1       	ldd	r25, Y+34	; 0x22
    189e:	20 e0       	ldi	r18, 0x00	; 0
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	4f e7       	ldi	r20, 0x7F	; 127
    18a4:	53 e4       	ldi	r21, 0x43	; 67
    18a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18aa:	18 16       	cp	r1, r24
    18ac:	0c f0       	brlt	.+2      	; 0x18b0 <HAL_LCD_Init+0x3b8>
    18ae:	7b c0       	rjmp	.+246    	; 0x19a6 <HAL_LCD_Init+0x4ae>
	{
		_delay_ms(__us / 1000.0);
    18b0:	6b a1       	ldd	r22, Y+35	; 0x23
    18b2:	7c a1       	ldd	r23, Y+36	; 0x24
    18b4:	8d a1       	ldd	r24, Y+37	; 0x25
    18b6:	9e a1       	ldd	r25, Y+38	; 0x26
    18b8:	20 e0       	ldi	r18, 0x00	; 0
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	4a e7       	ldi	r20, 0x7A	; 122
    18be:	54 e4       	ldi	r21, 0x44	; 68
    18c0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    18c4:	dc 01       	movw	r26, r24
    18c6:	cb 01       	movw	r24, r22
    18c8:	8a 8f       	std	Y+26, r24	; 0x1a
    18ca:	9b 8f       	std	Y+27, r25	; 0x1b
    18cc:	ac 8f       	std	Y+28, r26	; 0x1c
    18ce:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18d0:	6a 8d       	ldd	r22, Y+26	; 0x1a
    18d2:	7b 8d       	ldd	r23, Y+27	; 0x1b
    18d4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    18d6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    18d8:	20 e0       	ldi	r18, 0x00	; 0
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	4a e7       	ldi	r20, 0x7A	; 122
    18de:	55 e4       	ldi	r21, 0x45	; 69
    18e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18e4:	dc 01       	movw	r26, r24
    18e6:	cb 01       	movw	r24, r22
    18e8:	8e 8b       	std	Y+22, r24	; 0x16
    18ea:	9f 8b       	std	Y+23, r25	; 0x17
    18ec:	a8 8f       	std	Y+24, r26	; 0x18
    18ee:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    18f0:	6e 89       	ldd	r22, Y+22	; 0x16
    18f2:	7f 89       	ldd	r23, Y+23	; 0x17
    18f4:	88 8d       	ldd	r24, Y+24	; 0x18
    18f6:	99 8d       	ldd	r25, Y+25	; 0x19
    18f8:	20 e0       	ldi	r18, 0x00	; 0
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	40 e8       	ldi	r20, 0x80	; 128
    18fe:	5f e3       	ldi	r21, 0x3F	; 63
    1900:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1904:	88 23       	and	r24, r24
    1906:	2c f4       	brge	.+10     	; 0x1912 <HAL_LCD_Init+0x41a>
		__ticks = 1;
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	9d 8b       	std	Y+21, r25	; 0x15
    190e:	8c 8b       	std	Y+20, r24	; 0x14
    1910:	3f c0       	rjmp	.+126    	; 0x1990 <HAL_LCD_Init+0x498>
	else if (__tmp > 65535)
    1912:	6e 89       	ldd	r22, Y+22	; 0x16
    1914:	7f 89       	ldd	r23, Y+23	; 0x17
    1916:	88 8d       	ldd	r24, Y+24	; 0x18
    1918:	99 8d       	ldd	r25, Y+25	; 0x19
    191a:	20 e0       	ldi	r18, 0x00	; 0
    191c:	3f ef       	ldi	r19, 0xFF	; 255
    191e:	4f e7       	ldi	r20, 0x7F	; 127
    1920:	57 e4       	ldi	r21, 0x47	; 71
    1922:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1926:	18 16       	cp	r1, r24
    1928:	4c f5       	brge	.+82     	; 0x197c <HAL_LCD_Init+0x484>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    192a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    192c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    192e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1930:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1932:	20 e0       	ldi	r18, 0x00	; 0
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	40 e2       	ldi	r20, 0x20	; 32
    1938:	51 e4       	ldi	r21, 0x41	; 65
    193a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    193e:	dc 01       	movw	r26, r24
    1940:	cb 01       	movw	r24, r22
    1942:	bc 01       	movw	r22, r24
    1944:	cd 01       	movw	r24, r26
    1946:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    194a:	dc 01       	movw	r26, r24
    194c:	cb 01       	movw	r24, r22
    194e:	9d 8b       	std	Y+21, r25	; 0x15
    1950:	8c 8b       	std	Y+20, r24	; 0x14
    1952:	0f c0       	rjmp	.+30     	; 0x1972 <HAL_LCD_Init+0x47a>
    1954:	80 e9       	ldi	r24, 0x90	; 144
    1956:	91 e0       	ldi	r25, 0x01	; 1
    1958:	9b 8b       	std	Y+19, r25	; 0x13
    195a:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    195c:	8a 89       	ldd	r24, Y+18	; 0x12
    195e:	9b 89       	ldd	r25, Y+19	; 0x13
    1960:	01 97       	sbiw	r24, 0x01	; 1
    1962:	f1 f7       	brne	.-4      	; 0x1960 <HAL_LCD_Init+0x468>
    1964:	9b 8b       	std	Y+19, r25	; 0x13
    1966:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1968:	8c 89       	ldd	r24, Y+20	; 0x14
    196a:	9d 89       	ldd	r25, Y+21	; 0x15
    196c:	01 97       	sbiw	r24, 0x01	; 1
    196e:	9d 8b       	std	Y+21, r25	; 0x15
    1970:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1972:	8c 89       	ldd	r24, Y+20	; 0x14
    1974:	9d 89       	ldd	r25, Y+21	; 0x15
    1976:	00 97       	sbiw	r24, 0x00	; 0
    1978:	69 f7       	brne	.-38     	; 0x1954 <HAL_LCD_Init+0x45c>
    197a:	24 c0       	rjmp	.+72     	; 0x19c4 <HAL_LCD_Init+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    197c:	6e 89       	ldd	r22, Y+22	; 0x16
    197e:	7f 89       	ldd	r23, Y+23	; 0x17
    1980:	88 8d       	ldd	r24, Y+24	; 0x18
    1982:	99 8d       	ldd	r25, Y+25	; 0x19
    1984:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1988:	dc 01       	movw	r26, r24
    198a:	cb 01       	movw	r24, r22
    198c:	9d 8b       	std	Y+21, r25	; 0x15
    198e:	8c 8b       	std	Y+20, r24	; 0x14
    1990:	8c 89       	ldd	r24, Y+20	; 0x14
    1992:	9d 89       	ldd	r25, Y+21	; 0x15
    1994:	99 8b       	std	Y+17, r25	; 0x11
    1996:	88 8b       	std	Y+16, r24	; 0x10
    1998:	88 89       	ldd	r24, Y+16	; 0x10
    199a:	99 89       	ldd	r25, Y+17	; 0x11
    199c:	01 97       	sbiw	r24, 0x01	; 1
    199e:	f1 f7       	brne	.-4      	; 0x199c <HAL_LCD_Init+0x4a4>
    19a0:	99 8b       	std	Y+17, r25	; 0x11
    19a2:	88 8b       	std	Y+16, r24	; 0x10
    19a4:	0f c0       	rjmp	.+30     	; 0x19c4 <HAL_LCD_Init+0x4cc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    19a6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    19a8:	78 a1       	ldd	r23, Y+32	; 0x20
    19aa:	89 a1       	ldd	r24, Y+33	; 0x21
    19ac:	9a a1       	ldd	r25, Y+34	; 0x22
    19ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b2:	dc 01       	movw	r26, r24
    19b4:	cb 01       	movw	r24, r22
    19b6:	8e 8f       	std	Y+30, r24	; 0x1e
    19b8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    19ba:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    19bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    19be:	8a 95       	dec	r24
    19c0:	f1 f7       	brne	.-4      	; 0x19be <HAL_LCD_Init+0x4c6>
    19c2:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_us(40);

	HAL_LCD_SendCommand(0x00);
    19c4:	80 e0       	ldi	r24, 0x00	; 0
    19c6:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <HAL_LCD_SendCommand>
	HAL_LCD_SendCommand(0x10);
    19ca:	80 e1       	ldi	r24, 0x10	; 16
    19cc:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <HAL_LCD_SendCommand>
    19d0:	8d ec       	ldi	r24, 0xCD	; 205
    19d2:	9c ec       	ldi	r25, 0xCC	; 204
    19d4:	ac ec       	ldi	r26, 0xCC	; 204
    19d6:	bf e3       	ldi	r27, 0x3F	; 63
    19d8:	8b 87       	std	Y+11, r24	; 0x0b
    19da:	9c 87       	std	Y+12, r25	; 0x0c
    19dc:	ad 87       	std	Y+13, r26	; 0x0d
    19de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    19e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    19e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    19e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    19e8:	20 e0       	ldi	r18, 0x00	; 0
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	4a e7       	ldi	r20, 0x7A	; 122
    19ee:	55 e4       	ldi	r21, 0x45	; 69
    19f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19f4:	dc 01       	movw	r26, r24
    19f6:	cb 01       	movw	r24, r22
    19f8:	8f 83       	std	Y+7, r24	; 0x07
    19fa:	98 87       	std	Y+8, r25	; 0x08
    19fc:	a9 87       	std	Y+9, r26	; 0x09
    19fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a00:	6f 81       	ldd	r22, Y+7	; 0x07
    1a02:	78 85       	ldd	r23, Y+8	; 0x08
    1a04:	89 85       	ldd	r24, Y+9	; 0x09
    1a06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a08:	20 e0       	ldi	r18, 0x00	; 0
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	40 e8       	ldi	r20, 0x80	; 128
    1a0e:	5f e3       	ldi	r21, 0x3F	; 63
    1a10:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a14:	88 23       	and	r24, r24
    1a16:	2c f4       	brge	.+10     	; 0x1a22 <HAL_LCD_Init+0x52a>
		__ticks = 1;
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	9e 83       	std	Y+6, r25	; 0x06
    1a1e:	8d 83       	std	Y+5, r24	; 0x05
    1a20:	3f c0       	rjmp	.+126    	; 0x1aa0 <HAL_LCD_Init+0x5a8>
	else if (__tmp > 65535)
    1a22:	6f 81       	ldd	r22, Y+7	; 0x07
    1a24:	78 85       	ldd	r23, Y+8	; 0x08
    1a26:	89 85       	ldd	r24, Y+9	; 0x09
    1a28:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a2a:	20 e0       	ldi	r18, 0x00	; 0
    1a2c:	3f ef       	ldi	r19, 0xFF	; 255
    1a2e:	4f e7       	ldi	r20, 0x7F	; 127
    1a30:	57 e4       	ldi	r21, 0x47	; 71
    1a32:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a36:	18 16       	cp	r1, r24
    1a38:	4c f5       	brge	.+82     	; 0x1a8c <HAL_LCD_Init+0x594>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a40:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a42:	20 e0       	ldi	r18, 0x00	; 0
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	40 e2       	ldi	r20, 0x20	; 32
    1a48:	51 e4       	ldi	r21, 0x41	; 65
    1a4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a4e:	dc 01       	movw	r26, r24
    1a50:	cb 01       	movw	r24, r22
    1a52:	bc 01       	movw	r22, r24
    1a54:	cd 01       	movw	r24, r26
    1a56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a5a:	dc 01       	movw	r26, r24
    1a5c:	cb 01       	movw	r24, r22
    1a5e:	9e 83       	std	Y+6, r25	; 0x06
    1a60:	8d 83       	std	Y+5, r24	; 0x05
    1a62:	0f c0       	rjmp	.+30     	; 0x1a82 <HAL_LCD_Init+0x58a>
    1a64:	80 e9       	ldi	r24, 0x90	; 144
    1a66:	91 e0       	ldi	r25, 0x01	; 1
    1a68:	9c 83       	std	Y+4, r25	; 0x04
    1a6a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a70:	01 97       	sbiw	r24, 0x01	; 1
    1a72:	f1 f7       	brne	.-4      	; 0x1a70 <HAL_LCD_Init+0x578>
    1a74:	9c 83       	std	Y+4, r25	; 0x04
    1a76:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a78:	8d 81       	ldd	r24, Y+5	; 0x05
    1a7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a7c:	01 97       	sbiw	r24, 0x01	; 1
    1a7e:	9e 83       	std	Y+6, r25	; 0x06
    1a80:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a82:	8d 81       	ldd	r24, Y+5	; 0x05
    1a84:	9e 81       	ldd	r25, Y+6	; 0x06
    1a86:	00 97       	sbiw	r24, 0x00	; 0
    1a88:	69 f7       	brne	.-38     	; 0x1a64 <HAL_LCD_Init+0x56c>
    1a8a:	14 c0       	rjmp	.+40     	; 0x1ab4 <HAL_LCD_Init+0x5bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a8e:	78 85       	ldd	r23, Y+8	; 0x08
    1a90:	89 85       	ldd	r24, Y+9	; 0x09
    1a92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a98:	dc 01       	movw	r26, r24
    1a9a:	cb 01       	movw	r24, r22
    1a9c:	9e 83       	std	Y+6, r25	; 0x06
    1a9e:	8d 83       	std	Y+5, r24	; 0x05
    1aa0:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa2:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa4:	9a 83       	std	Y+2, r25	; 0x02
    1aa6:	89 83       	std	Y+1, r24	; 0x01
    1aa8:	89 81       	ldd	r24, Y+1	; 0x01
    1aaa:	9a 81       	ldd	r25, Y+2	; 0x02
    1aac:	01 97       	sbiw	r24, 0x01	; 1
    1aae:	f1 f7       	brne	.-4      	; 0x1aac <HAL_LCD_Init+0x5b4>
    1ab0:	9a 83       	std	Y+2, r25	; 0x02
    1ab2:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(1.6);

	// End of initialization

	InitFinished = 1;
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	80 93 68 00 	sts	0x0068, r24
}
    1aba:	c4 5b       	subi	r28, 0xB4	; 180
    1abc:	df 4f       	sbci	r29, 0xFF	; 255
    1abe:	0f b6       	in	r0, 0x3f	; 63
    1ac0:	f8 94       	cli
    1ac2:	de bf       	out	0x3e, r29	; 62
    1ac4:	0f be       	out	0x3f, r0	; 63
    1ac6:	cd bf       	out	0x3d, r28	; 61
    1ac8:	cf 91       	pop	r28
    1aca:	df 91       	pop	r29
    1acc:	1f 91       	pop	r17
    1ace:	0f 91       	pop	r16
    1ad0:	08 95       	ret

00001ad2 <HAL_LCD_SendCommand>:


void HAL_LCD_SendCommand(u8 cmd)
{
    1ad2:	df 93       	push	r29
    1ad4:	cf 93       	push	r28
    1ad6:	cd b7       	in	r28, 0x3d	; 61
    1ad8:	de b7       	in	r29, 0x3e	; 62
    1ada:	ef 97       	sbiw	r28, 0x3f	; 63
    1adc:	0f b6       	in	r0, 0x3f	; 63
    1ade:	f8 94       	cli
    1ae0:	de bf       	out	0x3e, r29	; 62
    1ae2:	0f be       	out	0x3f, r0	; 63
    1ae4:	cd bf       	out	0x3d, r28	; 61
    1ae6:	8f af       	std	Y+63, r24	; 0x3f
	MCAL_DIO_voidWritePin(RS, Low);
    1ae8:	80 e0       	ldi	r24, 0x00	; 0
    1aea:	63 e0       	ldi	r22, 0x03	; 3
    1aec:	40 e0       	ldi	r20, 0x00	; 0
    1aee:	0e 94 3a 07 	call	0xe74	; 0xe74 <MCAL_DIO_voidWritePin>

	MCAL_DIO_voidWritePin(DB4, GET_BIT(cmd,4));
    1af2:	8f ad       	ldd	r24, Y+63	; 0x3f
    1af4:	82 95       	swap	r24
    1af6:	8f 70       	andi	r24, 0x0F	; 15
    1af8:	98 2f       	mov	r25, r24
    1afa:	91 70       	andi	r25, 0x01	; 1
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	60 e0       	ldi	r22, 0x00	; 0
    1b00:	49 2f       	mov	r20, r25
    1b02:	0e 94 3a 07 	call	0xe74	; 0xe74 <MCAL_DIO_voidWritePin>
	MCAL_DIO_voidWritePin(DB5, GET_BIT(cmd,5));
    1b06:	8f ad       	ldd	r24, Y+63	; 0x3f
    1b08:	82 95       	swap	r24
    1b0a:	86 95       	lsr	r24
    1b0c:	87 70       	andi	r24, 0x07	; 7
    1b0e:	98 2f       	mov	r25, r24
    1b10:	91 70       	andi	r25, 0x01	; 1
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	61 e0       	ldi	r22, 0x01	; 1
    1b16:	49 2f       	mov	r20, r25
    1b18:	0e 94 3a 07 	call	0xe74	; 0xe74 <MCAL_DIO_voidWritePin>
	MCAL_DIO_voidWritePin(DB6, GET_BIT(cmd,6));
    1b1c:	8f ad       	ldd	r24, Y+63	; 0x3f
    1b1e:	82 95       	swap	r24
    1b20:	86 95       	lsr	r24
    1b22:	86 95       	lsr	r24
    1b24:	83 70       	andi	r24, 0x03	; 3
    1b26:	98 2f       	mov	r25, r24
    1b28:	91 70       	andi	r25, 0x01	; 1
    1b2a:	81 e0       	ldi	r24, 0x01	; 1
    1b2c:	62 e0       	ldi	r22, 0x02	; 2
    1b2e:	49 2f       	mov	r20, r25
    1b30:	0e 94 3a 07 	call	0xe74	; 0xe74 <MCAL_DIO_voidWritePin>
	MCAL_DIO_voidWritePin(DB7, GET_BIT(cmd,7));
    1b34:	8f ad       	ldd	r24, Y+63	; 0x3f
    1b36:	98 2f       	mov	r25, r24
    1b38:	99 1f       	adc	r25, r25
    1b3a:	99 27       	eor	r25, r25
    1b3c:	99 1f       	adc	r25, r25
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	64 e0       	ldi	r22, 0x04	; 4
    1b42:	49 2f       	mov	r20, r25
    1b44:	0e 94 3a 07 	call	0xe74	; 0xe74 <MCAL_DIO_voidWritePin>

	MCAL_DIO_voidWritePin(E, High);
    1b48:	80 e0       	ldi	r24, 0x00	; 0
    1b4a:	62 e0       	ldi	r22, 0x02	; 2
    1b4c:	41 e0       	ldi	r20, 0x01	; 1
    1b4e:	0e 94 3a 07 	call	0xe74	; 0xe74 <MCAL_DIO_voidWritePin>
    1b52:	80 e0       	ldi	r24, 0x00	; 0
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	ac e4       	ldi	r26, 0x4C	; 76
    1b58:	b2 e4       	ldi	r27, 0x42	; 66
    1b5a:	8b af       	std	Y+59, r24	; 0x3b
    1b5c:	9c af       	std	Y+60, r25	; 0x3c
    1b5e:	ad af       	std	Y+61, r26	; 0x3d
    1b60:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b62:	6b ad       	ldd	r22, Y+59	; 0x3b
    1b64:	7c ad       	ldd	r23, Y+60	; 0x3c
    1b66:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b68:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b6a:	2b ea       	ldi	r18, 0xAB	; 171
    1b6c:	3a ea       	ldi	r19, 0xAA	; 170
    1b6e:	4a ea       	ldi	r20, 0xAA	; 170
    1b70:	50 e4       	ldi	r21, 0x40	; 64
    1b72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b76:	dc 01       	movw	r26, r24
    1b78:	cb 01       	movw	r24, r22
    1b7a:	8f ab       	std	Y+55, r24	; 0x37
    1b7c:	98 af       	std	Y+56, r25	; 0x38
    1b7e:	a9 af       	std	Y+57, r26	; 0x39
    1b80:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1b82:	6f a9       	ldd	r22, Y+55	; 0x37
    1b84:	78 ad       	ldd	r23, Y+56	; 0x38
    1b86:	89 ad       	ldd	r24, Y+57	; 0x39
    1b88:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b8a:	20 e0       	ldi	r18, 0x00	; 0
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	40 e8       	ldi	r20, 0x80	; 128
    1b90:	5f e3       	ldi	r21, 0x3F	; 63
    1b92:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b96:	88 23       	and	r24, r24
    1b98:	1c f4       	brge	.+6      	; 0x1ba0 <HAL_LCD_SendCommand+0xce>
		__ticks = 1;
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	8e ab       	std	Y+54, r24	; 0x36
    1b9e:	91 c0       	rjmp	.+290    	; 0x1cc2 <HAL_LCD_SendCommand+0x1f0>
	else if (__tmp > 255)
    1ba0:	6f a9       	ldd	r22, Y+55	; 0x37
    1ba2:	78 ad       	ldd	r23, Y+56	; 0x38
    1ba4:	89 ad       	ldd	r24, Y+57	; 0x39
    1ba6:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	4f e7       	ldi	r20, 0x7F	; 127
    1bae:	53 e4       	ldi	r21, 0x43	; 67
    1bb0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bb4:	18 16       	cp	r1, r24
    1bb6:	0c f0       	brlt	.+2      	; 0x1bba <HAL_LCD_SendCommand+0xe8>
    1bb8:	7b c0       	rjmp	.+246    	; 0x1cb0 <HAL_LCD_SendCommand+0x1de>
	{
		_delay_ms(__us / 1000.0);
    1bba:	6b ad       	ldd	r22, Y+59	; 0x3b
    1bbc:	7c ad       	ldd	r23, Y+60	; 0x3c
    1bbe:	8d ad       	ldd	r24, Y+61	; 0x3d
    1bc0:	9e ad       	ldd	r25, Y+62	; 0x3e
    1bc2:	20 e0       	ldi	r18, 0x00	; 0
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	4a e7       	ldi	r20, 0x7A	; 122
    1bc8:	54 e4       	ldi	r21, 0x44	; 68
    1bca:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1bce:	dc 01       	movw	r26, r24
    1bd0:	cb 01       	movw	r24, r22
    1bd2:	8a ab       	std	Y+50, r24	; 0x32
    1bd4:	9b ab       	std	Y+51, r25	; 0x33
    1bd6:	ac ab       	std	Y+52, r26	; 0x34
    1bd8:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bda:	6a a9       	ldd	r22, Y+50	; 0x32
    1bdc:	7b a9       	ldd	r23, Y+51	; 0x33
    1bde:	8c a9       	ldd	r24, Y+52	; 0x34
    1be0:	9d a9       	ldd	r25, Y+53	; 0x35
    1be2:	20 e0       	ldi	r18, 0x00	; 0
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	4a e7       	ldi	r20, 0x7A	; 122
    1be8:	55 e4       	ldi	r21, 0x45	; 69
    1bea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bee:	dc 01       	movw	r26, r24
    1bf0:	cb 01       	movw	r24, r22
    1bf2:	8e a7       	std	Y+46, r24	; 0x2e
    1bf4:	9f a7       	std	Y+47, r25	; 0x2f
    1bf6:	a8 ab       	std	Y+48, r26	; 0x30
    1bf8:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1bfa:	6e a5       	ldd	r22, Y+46	; 0x2e
    1bfc:	7f a5       	ldd	r23, Y+47	; 0x2f
    1bfe:	88 a9       	ldd	r24, Y+48	; 0x30
    1c00:	99 a9       	ldd	r25, Y+49	; 0x31
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	40 e8       	ldi	r20, 0x80	; 128
    1c08:	5f e3       	ldi	r21, 0x3F	; 63
    1c0a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c0e:	88 23       	and	r24, r24
    1c10:	2c f4       	brge	.+10     	; 0x1c1c <HAL_LCD_SendCommand+0x14a>
		__ticks = 1;
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	9d a7       	std	Y+45, r25	; 0x2d
    1c18:	8c a7       	std	Y+44, r24	; 0x2c
    1c1a:	3f c0       	rjmp	.+126    	; 0x1c9a <HAL_LCD_SendCommand+0x1c8>
	else if (__tmp > 65535)
    1c1c:	6e a5       	ldd	r22, Y+46	; 0x2e
    1c1e:	7f a5       	ldd	r23, Y+47	; 0x2f
    1c20:	88 a9       	ldd	r24, Y+48	; 0x30
    1c22:	99 a9       	ldd	r25, Y+49	; 0x31
    1c24:	20 e0       	ldi	r18, 0x00	; 0
    1c26:	3f ef       	ldi	r19, 0xFF	; 255
    1c28:	4f e7       	ldi	r20, 0x7F	; 127
    1c2a:	57 e4       	ldi	r21, 0x47	; 71
    1c2c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c30:	18 16       	cp	r1, r24
    1c32:	4c f5       	brge	.+82     	; 0x1c86 <HAL_LCD_SendCommand+0x1b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c34:	6a a9       	ldd	r22, Y+50	; 0x32
    1c36:	7b a9       	ldd	r23, Y+51	; 0x33
    1c38:	8c a9       	ldd	r24, Y+52	; 0x34
    1c3a:	9d a9       	ldd	r25, Y+53	; 0x35
    1c3c:	20 e0       	ldi	r18, 0x00	; 0
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	40 e2       	ldi	r20, 0x20	; 32
    1c42:	51 e4       	ldi	r21, 0x41	; 65
    1c44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c48:	dc 01       	movw	r26, r24
    1c4a:	cb 01       	movw	r24, r22
    1c4c:	bc 01       	movw	r22, r24
    1c4e:	cd 01       	movw	r24, r26
    1c50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c54:	dc 01       	movw	r26, r24
    1c56:	cb 01       	movw	r24, r22
    1c58:	9d a7       	std	Y+45, r25	; 0x2d
    1c5a:	8c a7       	std	Y+44, r24	; 0x2c
    1c5c:	0f c0       	rjmp	.+30     	; 0x1c7c <HAL_LCD_SendCommand+0x1aa>
    1c5e:	80 e9       	ldi	r24, 0x90	; 144
    1c60:	91 e0       	ldi	r25, 0x01	; 1
    1c62:	9b a7       	std	Y+43, r25	; 0x2b
    1c64:	8a a7       	std	Y+42, r24	; 0x2a
    1c66:	8a a5       	ldd	r24, Y+42	; 0x2a
    1c68:	9b a5       	ldd	r25, Y+43	; 0x2b
    1c6a:	01 97       	sbiw	r24, 0x01	; 1
    1c6c:	f1 f7       	brne	.-4      	; 0x1c6a <HAL_LCD_SendCommand+0x198>
    1c6e:	9b a7       	std	Y+43, r25	; 0x2b
    1c70:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c72:	8c a5       	ldd	r24, Y+44	; 0x2c
    1c74:	9d a5       	ldd	r25, Y+45	; 0x2d
    1c76:	01 97       	sbiw	r24, 0x01	; 1
    1c78:	9d a7       	std	Y+45, r25	; 0x2d
    1c7a:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c7c:	8c a5       	ldd	r24, Y+44	; 0x2c
    1c7e:	9d a5       	ldd	r25, Y+45	; 0x2d
    1c80:	00 97       	sbiw	r24, 0x00	; 0
    1c82:	69 f7       	brne	.-38     	; 0x1c5e <HAL_LCD_SendCommand+0x18c>
    1c84:	24 c0       	rjmp	.+72     	; 0x1cce <HAL_LCD_SendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c86:	6e a5       	ldd	r22, Y+46	; 0x2e
    1c88:	7f a5       	ldd	r23, Y+47	; 0x2f
    1c8a:	88 a9       	ldd	r24, Y+48	; 0x30
    1c8c:	99 a9       	ldd	r25, Y+49	; 0x31
    1c8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c92:	dc 01       	movw	r26, r24
    1c94:	cb 01       	movw	r24, r22
    1c96:	9d a7       	std	Y+45, r25	; 0x2d
    1c98:	8c a7       	std	Y+44, r24	; 0x2c
    1c9a:	8c a5       	ldd	r24, Y+44	; 0x2c
    1c9c:	9d a5       	ldd	r25, Y+45	; 0x2d
    1c9e:	99 a7       	std	Y+41, r25	; 0x29
    1ca0:	88 a7       	std	Y+40, r24	; 0x28
    1ca2:	88 a5       	ldd	r24, Y+40	; 0x28
    1ca4:	99 a5       	ldd	r25, Y+41	; 0x29
    1ca6:	01 97       	sbiw	r24, 0x01	; 1
    1ca8:	f1 f7       	brne	.-4      	; 0x1ca6 <HAL_LCD_SendCommand+0x1d4>
    1caa:	99 a7       	std	Y+41, r25	; 0x29
    1cac:	88 a7       	std	Y+40, r24	; 0x28
    1cae:	0f c0       	rjmp	.+30     	; 0x1cce <HAL_LCD_SendCommand+0x1fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1cb0:	6f a9       	ldd	r22, Y+55	; 0x37
    1cb2:	78 ad       	ldd	r23, Y+56	; 0x38
    1cb4:	89 ad       	ldd	r24, Y+57	; 0x39
    1cb6:	9a ad       	ldd	r25, Y+58	; 0x3a
    1cb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cbc:	dc 01       	movw	r26, r24
    1cbe:	cb 01       	movw	r24, r22
    1cc0:	8e ab       	std	Y+54, r24	; 0x36
    1cc2:	8e a9       	ldd	r24, Y+54	; 0x36
    1cc4:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1cc6:	8f a1       	ldd	r24, Y+39	; 0x27
    1cc8:	8a 95       	dec	r24
    1cca:	f1 f7       	brne	.-4      	; 0x1cc8 <HAL_LCD_SendCommand+0x1f6>
    1ccc:	8f a3       	std	Y+39, r24	; 0x27

	_delay_us(51);

	MCAL_DIO_voidWritePin(E, Low);
    1cce:	80 e0       	ldi	r24, 0x00	; 0
    1cd0:	62 e0       	ldi	r22, 0x02	; 2
    1cd2:	40 e0       	ldi	r20, 0x00	; 0
    1cd4:	0e 94 3a 07 	call	0xe74	; 0xe74 <MCAL_DIO_voidWritePin>

	if(InitFinished)
    1cd8:	80 91 68 00 	lds	r24, 0x0068
    1cdc:	88 23       	and	r24, r24
    1cde:	09 f4       	brne	.+2      	; 0x1ce2 <HAL_LCD_SendCommand+0x210>
    1ce0:	ee c0       	rjmp	.+476    	; 0x1ebe <HAL_LCD_SendCommand+0x3ec>
	{
		MCAL_DIO_voidWritePin(DB4, GET_BIT(cmd,0));
    1ce2:	8f ad       	ldd	r24, Y+63	; 0x3f
    1ce4:	98 2f       	mov	r25, r24
    1ce6:	91 70       	andi	r25, 0x01	; 1
    1ce8:	81 e0       	ldi	r24, 0x01	; 1
    1cea:	60 e0       	ldi	r22, 0x00	; 0
    1cec:	49 2f       	mov	r20, r25
    1cee:	0e 94 3a 07 	call	0xe74	; 0xe74 <MCAL_DIO_voidWritePin>
		MCAL_DIO_voidWritePin(DB5, GET_BIT(cmd,1));
    1cf2:	8f ad       	ldd	r24, Y+63	; 0x3f
    1cf4:	86 95       	lsr	r24
    1cf6:	98 2f       	mov	r25, r24
    1cf8:	91 70       	andi	r25, 0x01	; 1
    1cfa:	81 e0       	ldi	r24, 0x01	; 1
    1cfc:	61 e0       	ldi	r22, 0x01	; 1
    1cfe:	49 2f       	mov	r20, r25
    1d00:	0e 94 3a 07 	call	0xe74	; 0xe74 <MCAL_DIO_voidWritePin>
		MCAL_DIO_voidWritePin(DB6, GET_BIT(cmd,2));
    1d04:	8f ad       	ldd	r24, Y+63	; 0x3f
    1d06:	86 95       	lsr	r24
    1d08:	86 95       	lsr	r24
    1d0a:	98 2f       	mov	r25, r24
    1d0c:	91 70       	andi	r25, 0x01	; 1
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	62 e0       	ldi	r22, 0x02	; 2
    1d12:	49 2f       	mov	r20, r25
    1d14:	0e 94 3a 07 	call	0xe74	; 0xe74 <MCAL_DIO_voidWritePin>
		MCAL_DIO_voidWritePin(DB7, GET_BIT(cmd,3));
    1d18:	8f ad       	ldd	r24, Y+63	; 0x3f
    1d1a:	86 95       	lsr	r24
    1d1c:	86 95       	lsr	r24
    1d1e:	86 95       	lsr	r24
    1d20:	98 2f       	mov	r25, r24
    1d22:	91 70       	andi	r25, 0x01	; 1
    1d24:	81 e0       	ldi	r24, 0x01	; 1
    1d26:	64 e0       	ldi	r22, 0x04	; 4
    1d28:	49 2f       	mov	r20, r25
    1d2a:	0e 94 3a 07 	call	0xe74	; 0xe74 <MCAL_DIO_voidWritePin>

		MCAL_DIO_voidWritePin(E, High);
    1d2e:	80 e0       	ldi	r24, 0x00	; 0
    1d30:	62 e0       	ldi	r22, 0x02	; 2
    1d32:	41 e0       	ldi	r20, 0x01	; 1
    1d34:	0e 94 3a 07 	call	0xe74	; 0xe74 <MCAL_DIO_voidWritePin>
    1d38:	80 e0       	ldi	r24, 0x00	; 0
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	ac e4       	ldi	r26, 0x4C	; 76
    1d3e:	b2 e4       	ldi	r27, 0x42	; 66
    1d40:	8b a3       	std	Y+35, r24	; 0x23
    1d42:	9c a3       	std	Y+36, r25	; 0x24
    1d44:	ad a3       	std	Y+37, r26	; 0x25
    1d46:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d48:	6b a1       	ldd	r22, Y+35	; 0x23
    1d4a:	7c a1       	ldd	r23, Y+36	; 0x24
    1d4c:	8d a1       	ldd	r24, Y+37	; 0x25
    1d4e:	9e a1       	ldd	r25, Y+38	; 0x26
    1d50:	2b ea       	ldi	r18, 0xAB	; 171
    1d52:	3a ea       	ldi	r19, 0xAA	; 170
    1d54:	4a ea       	ldi	r20, 0xAA	; 170
    1d56:	50 e4       	ldi	r21, 0x40	; 64
    1d58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d5c:	dc 01       	movw	r26, r24
    1d5e:	cb 01       	movw	r24, r22
    1d60:	8f 8f       	std	Y+31, r24	; 0x1f
    1d62:	98 a3       	std	Y+32, r25	; 0x20
    1d64:	a9 a3       	std	Y+33, r26	; 0x21
    1d66:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1d68:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1d6a:	78 a1       	ldd	r23, Y+32	; 0x20
    1d6c:	89 a1       	ldd	r24, Y+33	; 0x21
    1d6e:	9a a1       	ldd	r25, Y+34	; 0x22
    1d70:	20 e0       	ldi	r18, 0x00	; 0
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	40 e8       	ldi	r20, 0x80	; 128
    1d76:	5f e3       	ldi	r21, 0x3F	; 63
    1d78:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d7c:	88 23       	and	r24, r24
    1d7e:	1c f4       	brge	.+6      	; 0x1d86 <HAL_LCD_SendCommand+0x2b4>
		__ticks = 1;
    1d80:	81 e0       	ldi	r24, 0x01	; 1
    1d82:	8e 8f       	std	Y+30, r24	; 0x1e
    1d84:	91 c0       	rjmp	.+290    	; 0x1ea8 <HAL_LCD_SendCommand+0x3d6>
	else if (__tmp > 255)
    1d86:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1d88:	78 a1       	ldd	r23, Y+32	; 0x20
    1d8a:	89 a1       	ldd	r24, Y+33	; 0x21
    1d8c:	9a a1       	ldd	r25, Y+34	; 0x22
    1d8e:	20 e0       	ldi	r18, 0x00	; 0
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	4f e7       	ldi	r20, 0x7F	; 127
    1d94:	53 e4       	ldi	r21, 0x43	; 67
    1d96:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d9a:	18 16       	cp	r1, r24
    1d9c:	0c f0       	brlt	.+2      	; 0x1da0 <HAL_LCD_SendCommand+0x2ce>
    1d9e:	7b c0       	rjmp	.+246    	; 0x1e96 <HAL_LCD_SendCommand+0x3c4>
	{
		_delay_ms(__us / 1000.0);
    1da0:	6b a1       	ldd	r22, Y+35	; 0x23
    1da2:	7c a1       	ldd	r23, Y+36	; 0x24
    1da4:	8d a1       	ldd	r24, Y+37	; 0x25
    1da6:	9e a1       	ldd	r25, Y+38	; 0x26
    1da8:	20 e0       	ldi	r18, 0x00	; 0
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	4a e7       	ldi	r20, 0x7A	; 122
    1dae:	54 e4       	ldi	r21, 0x44	; 68
    1db0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1db4:	dc 01       	movw	r26, r24
    1db6:	cb 01       	movw	r24, r22
    1db8:	8a 8f       	std	Y+26, r24	; 0x1a
    1dba:	9b 8f       	std	Y+27, r25	; 0x1b
    1dbc:	ac 8f       	std	Y+28, r26	; 0x1c
    1dbe:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dc0:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1dc2:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1dc4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1dc6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1dc8:	20 e0       	ldi	r18, 0x00	; 0
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	4a e7       	ldi	r20, 0x7A	; 122
    1dce:	55 e4       	ldi	r21, 0x45	; 69
    1dd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd4:	dc 01       	movw	r26, r24
    1dd6:	cb 01       	movw	r24, r22
    1dd8:	8e 8b       	std	Y+22, r24	; 0x16
    1dda:	9f 8b       	std	Y+23, r25	; 0x17
    1ddc:	a8 8f       	std	Y+24, r26	; 0x18
    1dde:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1de0:	6e 89       	ldd	r22, Y+22	; 0x16
    1de2:	7f 89       	ldd	r23, Y+23	; 0x17
    1de4:	88 8d       	ldd	r24, Y+24	; 0x18
    1de6:	99 8d       	ldd	r25, Y+25	; 0x19
    1de8:	20 e0       	ldi	r18, 0x00	; 0
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	40 e8       	ldi	r20, 0x80	; 128
    1dee:	5f e3       	ldi	r21, 0x3F	; 63
    1df0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1df4:	88 23       	and	r24, r24
    1df6:	2c f4       	brge	.+10     	; 0x1e02 <HAL_LCD_SendCommand+0x330>
		__ticks = 1;
    1df8:	81 e0       	ldi	r24, 0x01	; 1
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	9d 8b       	std	Y+21, r25	; 0x15
    1dfe:	8c 8b       	std	Y+20, r24	; 0x14
    1e00:	3f c0       	rjmp	.+126    	; 0x1e80 <HAL_LCD_SendCommand+0x3ae>
	else if (__tmp > 65535)
    1e02:	6e 89       	ldd	r22, Y+22	; 0x16
    1e04:	7f 89       	ldd	r23, Y+23	; 0x17
    1e06:	88 8d       	ldd	r24, Y+24	; 0x18
    1e08:	99 8d       	ldd	r25, Y+25	; 0x19
    1e0a:	20 e0       	ldi	r18, 0x00	; 0
    1e0c:	3f ef       	ldi	r19, 0xFF	; 255
    1e0e:	4f e7       	ldi	r20, 0x7F	; 127
    1e10:	57 e4       	ldi	r21, 0x47	; 71
    1e12:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e16:	18 16       	cp	r1, r24
    1e18:	4c f5       	brge	.+82     	; 0x1e6c <HAL_LCD_SendCommand+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e1a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1e1c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1e1e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1e20:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1e22:	20 e0       	ldi	r18, 0x00	; 0
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	40 e2       	ldi	r20, 0x20	; 32
    1e28:	51 e4       	ldi	r21, 0x41	; 65
    1e2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e2e:	dc 01       	movw	r26, r24
    1e30:	cb 01       	movw	r24, r22
    1e32:	bc 01       	movw	r22, r24
    1e34:	cd 01       	movw	r24, r26
    1e36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e3a:	dc 01       	movw	r26, r24
    1e3c:	cb 01       	movw	r24, r22
    1e3e:	9d 8b       	std	Y+21, r25	; 0x15
    1e40:	8c 8b       	std	Y+20, r24	; 0x14
    1e42:	0f c0       	rjmp	.+30     	; 0x1e62 <HAL_LCD_SendCommand+0x390>
    1e44:	80 e9       	ldi	r24, 0x90	; 144
    1e46:	91 e0       	ldi	r25, 0x01	; 1
    1e48:	9b 8b       	std	Y+19, r25	; 0x13
    1e4a:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e4c:	8a 89       	ldd	r24, Y+18	; 0x12
    1e4e:	9b 89       	ldd	r25, Y+19	; 0x13
    1e50:	01 97       	sbiw	r24, 0x01	; 1
    1e52:	f1 f7       	brne	.-4      	; 0x1e50 <HAL_LCD_SendCommand+0x37e>
    1e54:	9b 8b       	std	Y+19, r25	; 0x13
    1e56:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e58:	8c 89       	ldd	r24, Y+20	; 0x14
    1e5a:	9d 89       	ldd	r25, Y+21	; 0x15
    1e5c:	01 97       	sbiw	r24, 0x01	; 1
    1e5e:	9d 8b       	std	Y+21, r25	; 0x15
    1e60:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e62:	8c 89       	ldd	r24, Y+20	; 0x14
    1e64:	9d 89       	ldd	r25, Y+21	; 0x15
    1e66:	00 97       	sbiw	r24, 0x00	; 0
    1e68:	69 f7       	brne	.-38     	; 0x1e44 <HAL_LCD_SendCommand+0x372>
    1e6a:	24 c0       	rjmp	.+72     	; 0x1eb4 <HAL_LCD_SendCommand+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e6c:	6e 89       	ldd	r22, Y+22	; 0x16
    1e6e:	7f 89       	ldd	r23, Y+23	; 0x17
    1e70:	88 8d       	ldd	r24, Y+24	; 0x18
    1e72:	99 8d       	ldd	r25, Y+25	; 0x19
    1e74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e78:	dc 01       	movw	r26, r24
    1e7a:	cb 01       	movw	r24, r22
    1e7c:	9d 8b       	std	Y+21, r25	; 0x15
    1e7e:	8c 8b       	std	Y+20, r24	; 0x14
    1e80:	8c 89       	ldd	r24, Y+20	; 0x14
    1e82:	9d 89       	ldd	r25, Y+21	; 0x15
    1e84:	99 8b       	std	Y+17, r25	; 0x11
    1e86:	88 8b       	std	Y+16, r24	; 0x10
    1e88:	88 89       	ldd	r24, Y+16	; 0x10
    1e8a:	99 89       	ldd	r25, Y+17	; 0x11
    1e8c:	01 97       	sbiw	r24, 0x01	; 1
    1e8e:	f1 f7       	brne	.-4      	; 0x1e8c <HAL_LCD_SendCommand+0x3ba>
    1e90:	99 8b       	std	Y+17, r25	; 0x11
    1e92:	88 8b       	std	Y+16, r24	; 0x10
    1e94:	0f c0       	rjmp	.+30     	; 0x1eb4 <HAL_LCD_SendCommand+0x3e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e96:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1e98:	78 a1       	ldd	r23, Y+32	; 0x20
    1e9a:	89 a1       	ldd	r24, Y+33	; 0x21
    1e9c:	9a a1       	ldd	r25, Y+34	; 0x22
    1e9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea2:	dc 01       	movw	r26, r24
    1ea4:	cb 01       	movw	r24, r22
    1ea6:	8e 8f       	std	Y+30, r24	; 0x1e
    1ea8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1eaa:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1eac:	8f 85       	ldd	r24, Y+15	; 0x0f
    1eae:	8a 95       	dec	r24
    1eb0:	f1 f7       	brne	.-4      	; 0x1eae <HAL_LCD_SendCommand+0x3dc>
    1eb2:	8f 87       	std	Y+15, r24	; 0x0f

		_delay_us(51);

		MCAL_DIO_voidWritePin(E, Low);
    1eb4:	80 e0       	ldi	r24, 0x00	; 0
    1eb6:	62 e0       	ldi	r22, 0x02	; 2
    1eb8:	40 e0       	ldi	r20, 0x00	; 0
    1eba:	0e 94 3a 07 	call	0xe74	; 0xe74 <MCAL_DIO_voidWritePin>
    1ebe:	8d ec       	ldi	r24, 0xCD	; 205
    1ec0:	9c ec       	ldi	r25, 0xCC	; 204
    1ec2:	ac ec       	ldi	r26, 0xCC	; 204
    1ec4:	bf e3       	ldi	r27, 0x3F	; 63
    1ec6:	8b 87       	std	Y+11, r24	; 0x0b
    1ec8:	9c 87       	std	Y+12, r25	; 0x0c
    1eca:	ad 87       	std	Y+13, r26	; 0x0d
    1ecc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ece:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ed0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ed2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ed4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	4a e7       	ldi	r20, 0x7A	; 122
    1edc:	55 e4       	ldi	r21, 0x45	; 69
    1ede:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee2:	dc 01       	movw	r26, r24
    1ee4:	cb 01       	movw	r24, r22
    1ee6:	8f 83       	std	Y+7, r24	; 0x07
    1ee8:	98 87       	std	Y+8, r25	; 0x08
    1eea:	a9 87       	std	Y+9, r26	; 0x09
    1eec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1eee:	6f 81       	ldd	r22, Y+7	; 0x07
    1ef0:	78 85       	ldd	r23, Y+8	; 0x08
    1ef2:	89 85       	ldd	r24, Y+9	; 0x09
    1ef4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	40 e8       	ldi	r20, 0x80	; 128
    1efc:	5f e3       	ldi	r21, 0x3F	; 63
    1efe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f02:	88 23       	and	r24, r24
    1f04:	2c f4       	brge	.+10     	; 0x1f10 <HAL_LCD_SendCommand+0x43e>
		__ticks = 1;
    1f06:	81 e0       	ldi	r24, 0x01	; 1
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	9e 83       	std	Y+6, r25	; 0x06
    1f0c:	8d 83       	std	Y+5, r24	; 0x05
    1f0e:	3f c0       	rjmp	.+126    	; 0x1f8e <HAL_LCD_SendCommand+0x4bc>
	else if (__tmp > 65535)
    1f10:	6f 81       	ldd	r22, Y+7	; 0x07
    1f12:	78 85       	ldd	r23, Y+8	; 0x08
    1f14:	89 85       	ldd	r24, Y+9	; 0x09
    1f16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	3f ef       	ldi	r19, 0xFF	; 255
    1f1c:	4f e7       	ldi	r20, 0x7F	; 127
    1f1e:	57 e4       	ldi	r21, 0x47	; 71
    1f20:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f24:	18 16       	cp	r1, r24
    1f26:	4c f5       	brge	.+82     	; 0x1f7a <HAL_LCD_SendCommand+0x4a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f28:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f30:	20 e0       	ldi	r18, 0x00	; 0
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	40 e2       	ldi	r20, 0x20	; 32
    1f36:	51 e4       	ldi	r21, 0x41	; 65
    1f38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f3c:	dc 01       	movw	r26, r24
    1f3e:	cb 01       	movw	r24, r22
    1f40:	bc 01       	movw	r22, r24
    1f42:	cd 01       	movw	r24, r26
    1f44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f48:	dc 01       	movw	r26, r24
    1f4a:	cb 01       	movw	r24, r22
    1f4c:	9e 83       	std	Y+6, r25	; 0x06
    1f4e:	8d 83       	std	Y+5, r24	; 0x05
    1f50:	0f c0       	rjmp	.+30     	; 0x1f70 <HAL_LCD_SendCommand+0x49e>
    1f52:	80 e9       	ldi	r24, 0x90	; 144
    1f54:	91 e0       	ldi	r25, 0x01	; 1
    1f56:	9c 83       	std	Y+4, r25	; 0x04
    1f58:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f5e:	01 97       	sbiw	r24, 0x01	; 1
    1f60:	f1 f7       	brne	.-4      	; 0x1f5e <HAL_LCD_SendCommand+0x48c>
    1f62:	9c 83       	std	Y+4, r25	; 0x04
    1f64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f66:	8d 81       	ldd	r24, Y+5	; 0x05
    1f68:	9e 81       	ldd	r25, Y+6	; 0x06
    1f6a:	01 97       	sbiw	r24, 0x01	; 1
    1f6c:	9e 83       	std	Y+6, r25	; 0x06
    1f6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f70:	8d 81       	ldd	r24, Y+5	; 0x05
    1f72:	9e 81       	ldd	r25, Y+6	; 0x06
    1f74:	00 97       	sbiw	r24, 0x00	; 0
    1f76:	69 f7       	brne	.-38     	; 0x1f52 <HAL_LCD_SendCommand+0x480>
    1f78:	14 c0       	rjmp	.+40     	; 0x1fa2 <HAL_LCD_SendCommand+0x4d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f7a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f7c:	78 85       	ldd	r23, Y+8	; 0x08
    1f7e:	89 85       	ldd	r24, Y+9	; 0x09
    1f80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f86:	dc 01       	movw	r26, r24
    1f88:	cb 01       	movw	r24, r22
    1f8a:	9e 83       	std	Y+6, r25	; 0x06
    1f8c:	8d 83       	std	Y+5, r24	; 0x05
    1f8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f90:	9e 81       	ldd	r25, Y+6	; 0x06
    1f92:	9a 83       	std	Y+2, r25	; 0x02
    1f94:	89 83       	std	Y+1, r24	; 0x01
    1f96:	89 81       	ldd	r24, Y+1	; 0x01
    1f98:	9a 81       	ldd	r25, Y+2	; 0x02
    1f9a:	01 97       	sbiw	r24, 0x01	; 1
    1f9c:	f1 f7       	brne	.-4      	; 0x1f9a <HAL_LCD_SendCommand+0x4c8>
    1f9e:	9a 83       	std	Y+2, r25	; 0x02
    1fa0:	89 83       	std	Y+1, r24	; 0x01
	}

	_delay_ms(1.6);
}
    1fa2:	ef 96       	adiw	r28, 0x3f	; 63
    1fa4:	0f b6       	in	r0, 0x3f	; 63
    1fa6:	f8 94       	cli
    1fa8:	de bf       	out	0x3e, r29	; 62
    1faa:	0f be       	out	0x3f, r0	; 63
    1fac:	cd bf       	out	0x3d, r28	; 61
    1fae:	cf 91       	pop	r28
    1fb0:	df 91       	pop	r29
    1fb2:	08 95       	ret

00001fb4 <HAL_LCD_WriteData>:


void HAL_LCD_WriteData(u8 Data)
{
    1fb4:	df 93       	push	r29
    1fb6:	cf 93       	push	r28
    1fb8:	cd b7       	in	r28, 0x3d	; 61
    1fba:	de b7       	in	r29, 0x3e	; 62
    1fbc:	ef 97       	sbiw	r28, 0x3f	; 63
    1fbe:	0f b6       	in	r0, 0x3f	; 63
    1fc0:	f8 94       	cli
    1fc2:	de bf       	out	0x3e, r29	; 62
    1fc4:	0f be       	out	0x3f, r0	; 63
    1fc6:	cd bf       	out	0x3d, r28	; 61
    1fc8:	8f af       	std	Y+63, r24	; 0x3f
	MCAL_DIO_voidWritePin(RS, High);
    1fca:	80 e0       	ldi	r24, 0x00	; 0
    1fcc:	63 e0       	ldi	r22, 0x03	; 3
    1fce:	41 e0       	ldi	r20, 0x01	; 1
    1fd0:	0e 94 3a 07 	call	0xe74	; 0xe74 <MCAL_DIO_voidWritePin>

	MCAL_DIO_voidWritePin(DB4, GET_BIT(Data,4));
    1fd4:	8f ad       	ldd	r24, Y+63	; 0x3f
    1fd6:	82 95       	swap	r24
    1fd8:	8f 70       	andi	r24, 0x0F	; 15
    1fda:	98 2f       	mov	r25, r24
    1fdc:	91 70       	andi	r25, 0x01	; 1
    1fde:	81 e0       	ldi	r24, 0x01	; 1
    1fe0:	60 e0       	ldi	r22, 0x00	; 0
    1fe2:	49 2f       	mov	r20, r25
    1fe4:	0e 94 3a 07 	call	0xe74	; 0xe74 <MCAL_DIO_voidWritePin>
	MCAL_DIO_voidWritePin(DB5, GET_BIT(Data,5));
    1fe8:	8f ad       	ldd	r24, Y+63	; 0x3f
    1fea:	82 95       	swap	r24
    1fec:	86 95       	lsr	r24
    1fee:	87 70       	andi	r24, 0x07	; 7
    1ff0:	98 2f       	mov	r25, r24
    1ff2:	91 70       	andi	r25, 0x01	; 1
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	61 e0       	ldi	r22, 0x01	; 1
    1ff8:	49 2f       	mov	r20, r25
    1ffa:	0e 94 3a 07 	call	0xe74	; 0xe74 <MCAL_DIO_voidWritePin>
	MCAL_DIO_voidWritePin(DB6, GET_BIT(Data,6));
    1ffe:	8f ad       	ldd	r24, Y+63	; 0x3f
    2000:	82 95       	swap	r24
    2002:	86 95       	lsr	r24
    2004:	86 95       	lsr	r24
    2006:	83 70       	andi	r24, 0x03	; 3
    2008:	98 2f       	mov	r25, r24
    200a:	91 70       	andi	r25, 0x01	; 1
    200c:	81 e0       	ldi	r24, 0x01	; 1
    200e:	62 e0       	ldi	r22, 0x02	; 2
    2010:	49 2f       	mov	r20, r25
    2012:	0e 94 3a 07 	call	0xe74	; 0xe74 <MCAL_DIO_voidWritePin>
	MCAL_DIO_voidWritePin(DB7, GET_BIT(Data,7));
    2016:	8f ad       	ldd	r24, Y+63	; 0x3f
    2018:	98 2f       	mov	r25, r24
    201a:	99 1f       	adc	r25, r25
    201c:	99 27       	eor	r25, r25
    201e:	99 1f       	adc	r25, r25
    2020:	81 e0       	ldi	r24, 0x01	; 1
    2022:	64 e0       	ldi	r22, 0x04	; 4
    2024:	49 2f       	mov	r20, r25
    2026:	0e 94 3a 07 	call	0xe74	; 0xe74 <MCAL_DIO_voidWritePin>

	MCAL_DIO_voidWritePin(E, High);
    202a:	80 e0       	ldi	r24, 0x00	; 0
    202c:	62 e0       	ldi	r22, 0x02	; 2
    202e:	41 e0       	ldi	r20, 0x01	; 1
    2030:	0e 94 3a 07 	call	0xe74	; 0xe74 <MCAL_DIO_voidWritePin>
    2034:	80 e0       	ldi	r24, 0x00	; 0
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	ac e4       	ldi	r26, 0x4C	; 76
    203a:	b2 e4       	ldi	r27, 0x42	; 66
    203c:	8b af       	std	Y+59, r24	; 0x3b
    203e:	9c af       	std	Y+60, r25	; 0x3c
    2040:	ad af       	std	Y+61, r26	; 0x3d
    2042:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2044:	6b ad       	ldd	r22, Y+59	; 0x3b
    2046:	7c ad       	ldd	r23, Y+60	; 0x3c
    2048:	8d ad       	ldd	r24, Y+61	; 0x3d
    204a:	9e ad       	ldd	r25, Y+62	; 0x3e
    204c:	2b ea       	ldi	r18, 0xAB	; 171
    204e:	3a ea       	ldi	r19, 0xAA	; 170
    2050:	4a ea       	ldi	r20, 0xAA	; 170
    2052:	50 e4       	ldi	r21, 0x40	; 64
    2054:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2058:	dc 01       	movw	r26, r24
    205a:	cb 01       	movw	r24, r22
    205c:	8f ab       	std	Y+55, r24	; 0x37
    205e:	98 af       	std	Y+56, r25	; 0x38
    2060:	a9 af       	std	Y+57, r26	; 0x39
    2062:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2064:	6f a9       	ldd	r22, Y+55	; 0x37
    2066:	78 ad       	ldd	r23, Y+56	; 0x38
    2068:	89 ad       	ldd	r24, Y+57	; 0x39
    206a:	9a ad       	ldd	r25, Y+58	; 0x3a
    206c:	20 e0       	ldi	r18, 0x00	; 0
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	40 e8       	ldi	r20, 0x80	; 128
    2072:	5f e3       	ldi	r21, 0x3F	; 63
    2074:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2078:	88 23       	and	r24, r24
    207a:	1c f4       	brge	.+6      	; 0x2082 <HAL_LCD_WriteData+0xce>
		__ticks = 1;
    207c:	81 e0       	ldi	r24, 0x01	; 1
    207e:	8e ab       	std	Y+54, r24	; 0x36
    2080:	91 c0       	rjmp	.+290    	; 0x21a4 <HAL_LCD_WriteData+0x1f0>
	else if (__tmp > 255)
    2082:	6f a9       	ldd	r22, Y+55	; 0x37
    2084:	78 ad       	ldd	r23, Y+56	; 0x38
    2086:	89 ad       	ldd	r24, Y+57	; 0x39
    2088:	9a ad       	ldd	r25, Y+58	; 0x3a
    208a:	20 e0       	ldi	r18, 0x00	; 0
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	4f e7       	ldi	r20, 0x7F	; 127
    2090:	53 e4       	ldi	r21, 0x43	; 67
    2092:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2096:	18 16       	cp	r1, r24
    2098:	0c f0       	brlt	.+2      	; 0x209c <HAL_LCD_WriteData+0xe8>
    209a:	7b c0       	rjmp	.+246    	; 0x2192 <HAL_LCD_WriteData+0x1de>
	{
		_delay_ms(__us / 1000.0);
    209c:	6b ad       	ldd	r22, Y+59	; 0x3b
    209e:	7c ad       	ldd	r23, Y+60	; 0x3c
    20a0:	8d ad       	ldd	r24, Y+61	; 0x3d
    20a2:	9e ad       	ldd	r25, Y+62	; 0x3e
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	4a e7       	ldi	r20, 0x7A	; 122
    20aa:	54 e4       	ldi	r21, 0x44	; 68
    20ac:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    20b0:	dc 01       	movw	r26, r24
    20b2:	cb 01       	movw	r24, r22
    20b4:	8a ab       	std	Y+50, r24	; 0x32
    20b6:	9b ab       	std	Y+51, r25	; 0x33
    20b8:	ac ab       	std	Y+52, r26	; 0x34
    20ba:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20bc:	6a a9       	ldd	r22, Y+50	; 0x32
    20be:	7b a9       	ldd	r23, Y+51	; 0x33
    20c0:	8c a9       	ldd	r24, Y+52	; 0x34
    20c2:	9d a9       	ldd	r25, Y+53	; 0x35
    20c4:	20 e0       	ldi	r18, 0x00	; 0
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	4a e7       	ldi	r20, 0x7A	; 122
    20ca:	55 e4       	ldi	r21, 0x45	; 69
    20cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d0:	dc 01       	movw	r26, r24
    20d2:	cb 01       	movw	r24, r22
    20d4:	8e a7       	std	Y+46, r24	; 0x2e
    20d6:	9f a7       	std	Y+47, r25	; 0x2f
    20d8:	a8 ab       	std	Y+48, r26	; 0x30
    20da:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    20dc:	6e a5       	ldd	r22, Y+46	; 0x2e
    20de:	7f a5       	ldd	r23, Y+47	; 0x2f
    20e0:	88 a9       	ldd	r24, Y+48	; 0x30
    20e2:	99 a9       	ldd	r25, Y+49	; 0x31
    20e4:	20 e0       	ldi	r18, 0x00	; 0
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	40 e8       	ldi	r20, 0x80	; 128
    20ea:	5f e3       	ldi	r21, 0x3F	; 63
    20ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20f0:	88 23       	and	r24, r24
    20f2:	2c f4       	brge	.+10     	; 0x20fe <HAL_LCD_WriteData+0x14a>
		__ticks = 1;
    20f4:	81 e0       	ldi	r24, 0x01	; 1
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	9d a7       	std	Y+45, r25	; 0x2d
    20fa:	8c a7       	std	Y+44, r24	; 0x2c
    20fc:	3f c0       	rjmp	.+126    	; 0x217c <HAL_LCD_WriteData+0x1c8>
	else if (__tmp > 65535)
    20fe:	6e a5       	ldd	r22, Y+46	; 0x2e
    2100:	7f a5       	ldd	r23, Y+47	; 0x2f
    2102:	88 a9       	ldd	r24, Y+48	; 0x30
    2104:	99 a9       	ldd	r25, Y+49	; 0x31
    2106:	20 e0       	ldi	r18, 0x00	; 0
    2108:	3f ef       	ldi	r19, 0xFF	; 255
    210a:	4f e7       	ldi	r20, 0x7F	; 127
    210c:	57 e4       	ldi	r21, 0x47	; 71
    210e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2112:	18 16       	cp	r1, r24
    2114:	4c f5       	brge	.+82     	; 0x2168 <HAL_LCD_WriteData+0x1b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2116:	6a a9       	ldd	r22, Y+50	; 0x32
    2118:	7b a9       	ldd	r23, Y+51	; 0x33
    211a:	8c a9       	ldd	r24, Y+52	; 0x34
    211c:	9d a9       	ldd	r25, Y+53	; 0x35
    211e:	20 e0       	ldi	r18, 0x00	; 0
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	40 e2       	ldi	r20, 0x20	; 32
    2124:	51 e4       	ldi	r21, 0x41	; 65
    2126:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    212a:	dc 01       	movw	r26, r24
    212c:	cb 01       	movw	r24, r22
    212e:	bc 01       	movw	r22, r24
    2130:	cd 01       	movw	r24, r26
    2132:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	9d a7       	std	Y+45, r25	; 0x2d
    213c:	8c a7       	std	Y+44, r24	; 0x2c
    213e:	0f c0       	rjmp	.+30     	; 0x215e <HAL_LCD_WriteData+0x1aa>
    2140:	80 e9       	ldi	r24, 0x90	; 144
    2142:	91 e0       	ldi	r25, 0x01	; 1
    2144:	9b a7       	std	Y+43, r25	; 0x2b
    2146:	8a a7       	std	Y+42, r24	; 0x2a
    2148:	8a a5       	ldd	r24, Y+42	; 0x2a
    214a:	9b a5       	ldd	r25, Y+43	; 0x2b
    214c:	01 97       	sbiw	r24, 0x01	; 1
    214e:	f1 f7       	brne	.-4      	; 0x214c <HAL_LCD_WriteData+0x198>
    2150:	9b a7       	std	Y+43, r25	; 0x2b
    2152:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2154:	8c a5       	ldd	r24, Y+44	; 0x2c
    2156:	9d a5       	ldd	r25, Y+45	; 0x2d
    2158:	01 97       	sbiw	r24, 0x01	; 1
    215a:	9d a7       	std	Y+45, r25	; 0x2d
    215c:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    215e:	8c a5       	ldd	r24, Y+44	; 0x2c
    2160:	9d a5       	ldd	r25, Y+45	; 0x2d
    2162:	00 97       	sbiw	r24, 0x00	; 0
    2164:	69 f7       	brne	.-38     	; 0x2140 <HAL_LCD_WriteData+0x18c>
    2166:	24 c0       	rjmp	.+72     	; 0x21b0 <HAL_LCD_WriteData+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2168:	6e a5       	ldd	r22, Y+46	; 0x2e
    216a:	7f a5       	ldd	r23, Y+47	; 0x2f
    216c:	88 a9       	ldd	r24, Y+48	; 0x30
    216e:	99 a9       	ldd	r25, Y+49	; 0x31
    2170:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2174:	dc 01       	movw	r26, r24
    2176:	cb 01       	movw	r24, r22
    2178:	9d a7       	std	Y+45, r25	; 0x2d
    217a:	8c a7       	std	Y+44, r24	; 0x2c
    217c:	8c a5       	ldd	r24, Y+44	; 0x2c
    217e:	9d a5       	ldd	r25, Y+45	; 0x2d
    2180:	99 a7       	std	Y+41, r25	; 0x29
    2182:	88 a7       	std	Y+40, r24	; 0x28
    2184:	88 a5       	ldd	r24, Y+40	; 0x28
    2186:	99 a5       	ldd	r25, Y+41	; 0x29
    2188:	01 97       	sbiw	r24, 0x01	; 1
    218a:	f1 f7       	brne	.-4      	; 0x2188 <HAL_LCD_WriteData+0x1d4>
    218c:	99 a7       	std	Y+41, r25	; 0x29
    218e:	88 a7       	std	Y+40, r24	; 0x28
    2190:	0f c0       	rjmp	.+30     	; 0x21b0 <HAL_LCD_WriteData+0x1fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2192:	6f a9       	ldd	r22, Y+55	; 0x37
    2194:	78 ad       	ldd	r23, Y+56	; 0x38
    2196:	89 ad       	ldd	r24, Y+57	; 0x39
    2198:	9a ad       	ldd	r25, Y+58	; 0x3a
    219a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    219e:	dc 01       	movw	r26, r24
    21a0:	cb 01       	movw	r24, r22
    21a2:	8e ab       	std	Y+54, r24	; 0x36
    21a4:	8e a9       	ldd	r24, Y+54	; 0x36
    21a6:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    21a8:	8f a1       	ldd	r24, Y+39	; 0x27
    21aa:	8a 95       	dec	r24
    21ac:	f1 f7       	brne	.-4      	; 0x21aa <HAL_LCD_WriteData+0x1f6>
    21ae:	8f a3       	std	Y+39, r24	; 0x27

	_delay_us(51);

	MCAL_DIO_voidWritePin(E, Low);
    21b0:	80 e0       	ldi	r24, 0x00	; 0
    21b2:	62 e0       	ldi	r22, 0x02	; 2
    21b4:	40 e0       	ldi	r20, 0x00	; 0
    21b6:	0e 94 3a 07 	call	0xe74	; 0xe74 <MCAL_DIO_voidWritePin>

	MCAL_DIO_voidWritePin(DB4, GET_BIT(Data,0));
    21ba:	8f ad       	ldd	r24, Y+63	; 0x3f
    21bc:	98 2f       	mov	r25, r24
    21be:	91 70       	andi	r25, 0x01	; 1
    21c0:	81 e0       	ldi	r24, 0x01	; 1
    21c2:	60 e0       	ldi	r22, 0x00	; 0
    21c4:	49 2f       	mov	r20, r25
    21c6:	0e 94 3a 07 	call	0xe74	; 0xe74 <MCAL_DIO_voidWritePin>
	MCAL_DIO_voidWritePin(DB5, GET_BIT(Data,1));
    21ca:	8f ad       	ldd	r24, Y+63	; 0x3f
    21cc:	86 95       	lsr	r24
    21ce:	98 2f       	mov	r25, r24
    21d0:	91 70       	andi	r25, 0x01	; 1
    21d2:	81 e0       	ldi	r24, 0x01	; 1
    21d4:	61 e0       	ldi	r22, 0x01	; 1
    21d6:	49 2f       	mov	r20, r25
    21d8:	0e 94 3a 07 	call	0xe74	; 0xe74 <MCAL_DIO_voidWritePin>
	MCAL_DIO_voidWritePin(DB6, GET_BIT(Data,2));
    21dc:	8f ad       	ldd	r24, Y+63	; 0x3f
    21de:	86 95       	lsr	r24
    21e0:	86 95       	lsr	r24
    21e2:	98 2f       	mov	r25, r24
    21e4:	91 70       	andi	r25, 0x01	; 1
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	62 e0       	ldi	r22, 0x02	; 2
    21ea:	49 2f       	mov	r20, r25
    21ec:	0e 94 3a 07 	call	0xe74	; 0xe74 <MCAL_DIO_voidWritePin>
	MCAL_DIO_voidWritePin(DB7, GET_BIT(Data,3));
    21f0:	8f ad       	ldd	r24, Y+63	; 0x3f
    21f2:	86 95       	lsr	r24
    21f4:	86 95       	lsr	r24
    21f6:	86 95       	lsr	r24
    21f8:	98 2f       	mov	r25, r24
    21fa:	91 70       	andi	r25, 0x01	; 1
    21fc:	81 e0       	ldi	r24, 0x01	; 1
    21fe:	64 e0       	ldi	r22, 0x04	; 4
    2200:	49 2f       	mov	r20, r25
    2202:	0e 94 3a 07 	call	0xe74	; 0xe74 <MCAL_DIO_voidWritePin>

	MCAL_DIO_voidWritePin(E, High);
    2206:	80 e0       	ldi	r24, 0x00	; 0
    2208:	62 e0       	ldi	r22, 0x02	; 2
    220a:	41 e0       	ldi	r20, 0x01	; 1
    220c:	0e 94 3a 07 	call	0xe74	; 0xe74 <MCAL_DIO_voidWritePin>
    2210:	80 e0       	ldi	r24, 0x00	; 0
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	ac e4       	ldi	r26, 0x4C	; 76
    2216:	b2 e4       	ldi	r27, 0x42	; 66
    2218:	8b a3       	std	Y+35, r24	; 0x23
    221a:	9c a3       	std	Y+36, r25	; 0x24
    221c:	ad a3       	std	Y+37, r26	; 0x25
    221e:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2220:	6b a1       	ldd	r22, Y+35	; 0x23
    2222:	7c a1       	ldd	r23, Y+36	; 0x24
    2224:	8d a1       	ldd	r24, Y+37	; 0x25
    2226:	9e a1       	ldd	r25, Y+38	; 0x26
    2228:	2b ea       	ldi	r18, 0xAB	; 171
    222a:	3a ea       	ldi	r19, 0xAA	; 170
    222c:	4a ea       	ldi	r20, 0xAA	; 170
    222e:	50 e4       	ldi	r21, 0x40	; 64
    2230:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2234:	dc 01       	movw	r26, r24
    2236:	cb 01       	movw	r24, r22
    2238:	8f 8f       	std	Y+31, r24	; 0x1f
    223a:	98 a3       	std	Y+32, r25	; 0x20
    223c:	a9 a3       	std	Y+33, r26	; 0x21
    223e:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2240:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2242:	78 a1       	ldd	r23, Y+32	; 0x20
    2244:	89 a1       	ldd	r24, Y+33	; 0x21
    2246:	9a a1       	ldd	r25, Y+34	; 0x22
    2248:	20 e0       	ldi	r18, 0x00	; 0
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	40 e8       	ldi	r20, 0x80	; 128
    224e:	5f e3       	ldi	r21, 0x3F	; 63
    2250:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2254:	88 23       	and	r24, r24
    2256:	1c f4       	brge	.+6      	; 0x225e <HAL_LCD_WriteData+0x2aa>
		__ticks = 1;
    2258:	81 e0       	ldi	r24, 0x01	; 1
    225a:	8e 8f       	std	Y+30, r24	; 0x1e
    225c:	91 c0       	rjmp	.+290    	; 0x2380 <HAL_LCD_WriteData+0x3cc>
	else if (__tmp > 255)
    225e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2260:	78 a1       	ldd	r23, Y+32	; 0x20
    2262:	89 a1       	ldd	r24, Y+33	; 0x21
    2264:	9a a1       	ldd	r25, Y+34	; 0x22
    2266:	20 e0       	ldi	r18, 0x00	; 0
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	4f e7       	ldi	r20, 0x7F	; 127
    226c:	53 e4       	ldi	r21, 0x43	; 67
    226e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2272:	18 16       	cp	r1, r24
    2274:	0c f0       	brlt	.+2      	; 0x2278 <HAL_LCD_WriteData+0x2c4>
    2276:	7b c0       	rjmp	.+246    	; 0x236e <HAL_LCD_WriteData+0x3ba>
	{
		_delay_ms(__us / 1000.0);
    2278:	6b a1       	ldd	r22, Y+35	; 0x23
    227a:	7c a1       	ldd	r23, Y+36	; 0x24
    227c:	8d a1       	ldd	r24, Y+37	; 0x25
    227e:	9e a1       	ldd	r25, Y+38	; 0x26
    2280:	20 e0       	ldi	r18, 0x00	; 0
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	4a e7       	ldi	r20, 0x7A	; 122
    2286:	54 e4       	ldi	r21, 0x44	; 68
    2288:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    228c:	dc 01       	movw	r26, r24
    228e:	cb 01       	movw	r24, r22
    2290:	8a 8f       	std	Y+26, r24	; 0x1a
    2292:	9b 8f       	std	Y+27, r25	; 0x1b
    2294:	ac 8f       	std	Y+28, r26	; 0x1c
    2296:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2298:	6a 8d       	ldd	r22, Y+26	; 0x1a
    229a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    229c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    229e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    22a0:	20 e0       	ldi	r18, 0x00	; 0
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	4a e7       	ldi	r20, 0x7A	; 122
    22a6:	55 e4       	ldi	r21, 0x45	; 69
    22a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ac:	dc 01       	movw	r26, r24
    22ae:	cb 01       	movw	r24, r22
    22b0:	8e 8b       	std	Y+22, r24	; 0x16
    22b2:	9f 8b       	std	Y+23, r25	; 0x17
    22b4:	a8 8f       	std	Y+24, r26	; 0x18
    22b6:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    22b8:	6e 89       	ldd	r22, Y+22	; 0x16
    22ba:	7f 89       	ldd	r23, Y+23	; 0x17
    22bc:	88 8d       	ldd	r24, Y+24	; 0x18
    22be:	99 8d       	ldd	r25, Y+25	; 0x19
    22c0:	20 e0       	ldi	r18, 0x00	; 0
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	40 e8       	ldi	r20, 0x80	; 128
    22c6:	5f e3       	ldi	r21, 0x3F	; 63
    22c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22cc:	88 23       	and	r24, r24
    22ce:	2c f4       	brge	.+10     	; 0x22da <HAL_LCD_WriteData+0x326>
		__ticks = 1;
    22d0:	81 e0       	ldi	r24, 0x01	; 1
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	9d 8b       	std	Y+21, r25	; 0x15
    22d6:	8c 8b       	std	Y+20, r24	; 0x14
    22d8:	3f c0       	rjmp	.+126    	; 0x2358 <HAL_LCD_WriteData+0x3a4>
	else if (__tmp > 65535)
    22da:	6e 89       	ldd	r22, Y+22	; 0x16
    22dc:	7f 89       	ldd	r23, Y+23	; 0x17
    22de:	88 8d       	ldd	r24, Y+24	; 0x18
    22e0:	99 8d       	ldd	r25, Y+25	; 0x19
    22e2:	20 e0       	ldi	r18, 0x00	; 0
    22e4:	3f ef       	ldi	r19, 0xFF	; 255
    22e6:	4f e7       	ldi	r20, 0x7F	; 127
    22e8:	57 e4       	ldi	r21, 0x47	; 71
    22ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22ee:	18 16       	cp	r1, r24
    22f0:	4c f5       	brge	.+82     	; 0x2344 <HAL_LCD_WriteData+0x390>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22f2:	6a 8d       	ldd	r22, Y+26	; 0x1a
    22f4:	7b 8d       	ldd	r23, Y+27	; 0x1b
    22f6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    22f8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    22fa:	20 e0       	ldi	r18, 0x00	; 0
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	40 e2       	ldi	r20, 0x20	; 32
    2300:	51 e4       	ldi	r21, 0x41	; 65
    2302:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2306:	dc 01       	movw	r26, r24
    2308:	cb 01       	movw	r24, r22
    230a:	bc 01       	movw	r22, r24
    230c:	cd 01       	movw	r24, r26
    230e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2312:	dc 01       	movw	r26, r24
    2314:	cb 01       	movw	r24, r22
    2316:	9d 8b       	std	Y+21, r25	; 0x15
    2318:	8c 8b       	std	Y+20, r24	; 0x14
    231a:	0f c0       	rjmp	.+30     	; 0x233a <HAL_LCD_WriteData+0x386>
    231c:	80 e9       	ldi	r24, 0x90	; 144
    231e:	91 e0       	ldi	r25, 0x01	; 1
    2320:	9b 8b       	std	Y+19, r25	; 0x13
    2322:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2324:	8a 89       	ldd	r24, Y+18	; 0x12
    2326:	9b 89       	ldd	r25, Y+19	; 0x13
    2328:	01 97       	sbiw	r24, 0x01	; 1
    232a:	f1 f7       	brne	.-4      	; 0x2328 <HAL_LCD_WriteData+0x374>
    232c:	9b 8b       	std	Y+19, r25	; 0x13
    232e:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2330:	8c 89       	ldd	r24, Y+20	; 0x14
    2332:	9d 89       	ldd	r25, Y+21	; 0x15
    2334:	01 97       	sbiw	r24, 0x01	; 1
    2336:	9d 8b       	std	Y+21, r25	; 0x15
    2338:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    233a:	8c 89       	ldd	r24, Y+20	; 0x14
    233c:	9d 89       	ldd	r25, Y+21	; 0x15
    233e:	00 97       	sbiw	r24, 0x00	; 0
    2340:	69 f7       	brne	.-38     	; 0x231c <HAL_LCD_WriteData+0x368>
    2342:	24 c0       	rjmp	.+72     	; 0x238c <HAL_LCD_WriteData+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2344:	6e 89       	ldd	r22, Y+22	; 0x16
    2346:	7f 89       	ldd	r23, Y+23	; 0x17
    2348:	88 8d       	ldd	r24, Y+24	; 0x18
    234a:	99 8d       	ldd	r25, Y+25	; 0x19
    234c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2350:	dc 01       	movw	r26, r24
    2352:	cb 01       	movw	r24, r22
    2354:	9d 8b       	std	Y+21, r25	; 0x15
    2356:	8c 8b       	std	Y+20, r24	; 0x14
    2358:	8c 89       	ldd	r24, Y+20	; 0x14
    235a:	9d 89       	ldd	r25, Y+21	; 0x15
    235c:	99 8b       	std	Y+17, r25	; 0x11
    235e:	88 8b       	std	Y+16, r24	; 0x10
    2360:	88 89       	ldd	r24, Y+16	; 0x10
    2362:	99 89       	ldd	r25, Y+17	; 0x11
    2364:	01 97       	sbiw	r24, 0x01	; 1
    2366:	f1 f7       	brne	.-4      	; 0x2364 <HAL_LCD_WriteData+0x3b0>
    2368:	99 8b       	std	Y+17, r25	; 0x11
    236a:	88 8b       	std	Y+16, r24	; 0x10
    236c:	0f c0       	rjmp	.+30     	; 0x238c <HAL_LCD_WriteData+0x3d8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    236e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2370:	78 a1       	ldd	r23, Y+32	; 0x20
    2372:	89 a1       	ldd	r24, Y+33	; 0x21
    2374:	9a a1       	ldd	r25, Y+34	; 0x22
    2376:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    237a:	dc 01       	movw	r26, r24
    237c:	cb 01       	movw	r24, r22
    237e:	8e 8f       	std	Y+30, r24	; 0x1e
    2380:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2382:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2384:	8f 85       	ldd	r24, Y+15	; 0x0f
    2386:	8a 95       	dec	r24
    2388:	f1 f7       	brne	.-4      	; 0x2386 <HAL_LCD_WriteData+0x3d2>
    238a:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_us(51);

	MCAL_DIO_voidWritePin(E, Low);
    238c:	80 e0       	ldi	r24, 0x00	; 0
    238e:	62 e0       	ldi	r22, 0x02	; 2
    2390:	40 e0       	ldi	r20, 0x00	; 0
    2392:	0e 94 3a 07 	call	0xe74	; 0xe74 <MCAL_DIO_voidWritePin>
    2396:	8d ec       	ldi	r24, 0xCD	; 205
    2398:	9c ec       	ldi	r25, 0xCC	; 204
    239a:	ac ec       	ldi	r26, 0xCC	; 204
    239c:	bf e3       	ldi	r27, 0x3F	; 63
    239e:	8b 87       	std	Y+11, r24	; 0x0b
    23a0:	9c 87       	std	Y+12, r25	; 0x0c
    23a2:	ad 87       	std	Y+13, r26	; 0x0d
    23a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    23a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    23aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    23ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    23ae:	20 e0       	ldi	r18, 0x00	; 0
    23b0:	30 e0       	ldi	r19, 0x00	; 0
    23b2:	4a e7       	ldi	r20, 0x7A	; 122
    23b4:	55 e4       	ldi	r21, 0x45	; 69
    23b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ba:	dc 01       	movw	r26, r24
    23bc:	cb 01       	movw	r24, r22
    23be:	8f 83       	std	Y+7, r24	; 0x07
    23c0:	98 87       	std	Y+8, r25	; 0x08
    23c2:	a9 87       	std	Y+9, r26	; 0x09
    23c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23c6:	6f 81       	ldd	r22, Y+7	; 0x07
    23c8:	78 85       	ldd	r23, Y+8	; 0x08
    23ca:	89 85       	ldd	r24, Y+9	; 0x09
    23cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ce:	20 e0       	ldi	r18, 0x00	; 0
    23d0:	30 e0       	ldi	r19, 0x00	; 0
    23d2:	40 e8       	ldi	r20, 0x80	; 128
    23d4:	5f e3       	ldi	r21, 0x3F	; 63
    23d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23da:	88 23       	and	r24, r24
    23dc:	2c f4       	brge	.+10     	; 0x23e8 <HAL_LCD_WriteData+0x434>
		__ticks = 1;
    23de:	81 e0       	ldi	r24, 0x01	; 1
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	9e 83       	std	Y+6, r25	; 0x06
    23e4:	8d 83       	std	Y+5, r24	; 0x05
    23e6:	3f c0       	rjmp	.+126    	; 0x2466 <HAL_LCD_WriteData+0x4b2>
	else if (__tmp > 65535)
    23e8:	6f 81       	ldd	r22, Y+7	; 0x07
    23ea:	78 85       	ldd	r23, Y+8	; 0x08
    23ec:	89 85       	ldd	r24, Y+9	; 0x09
    23ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    23f0:	20 e0       	ldi	r18, 0x00	; 0
    23f2:	3f ef       	ldi	r19, 0xFF	; 255
    23f4:	4f e7       	ldi	r20, 0x7F	; 127
    23f6:	57 e4       	ldi	r21, 0x47	; 71
    23f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23fc:	18 16       	cp	r1, r24
    23fe:	4c f5       	brge	.+82     	; 0x2452 <HAL_LCD_WriteData+0x49e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2400:	6b 85       	ldd	r22, Y+11	; 0x0b
    2402:	7c 85       	ldd	r23, Y+12	; 0x0c
    2404:	8d 85       	ldd	r24, Y+13	; 0x0d
    2406:	9e 85       	ldd	r25, Y+14	; 0x0e
    2408:	20 e0       	ldi	r18, 0x00	; 0
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	40 e2       	ldi	r20, 0x20	; 32
    240e:	51 e4       	ldi	r21, 0x41	; 65
    2410:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2414:	dc 01       	movw	r26, r24
    2416:	cb 01       	movw	r24, r22
    2418:	bc 01       	movw	r22, r24
    241a:	cd 01       	movw	r24, r26
    241c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2420:	dc 01       	movw	r26, r24
    2422:	cb 01       	movw	r24, r22
    2424:	9e 83       	std	Y+6, r25	; 0x06
    2426:	8d 83       	std	Y+5, r24	; 0x05
    2428:	0f c0       	rjmp	.+30     	; 0x2448 <HAL_LCD_WriteData+0x494>
    242a:	80 e9       	ldi	r24, 0x90	; 144
    242c:	91 e0       	ldi	r25, 0x01	; 1
    242e:	9c 83       	std	Y+4, r25	; 0x04
    2430:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2432:	8b 81       	ldd	r24, Y+3	; 0x03
    2434:	9c 81       	ldd	r25, Y+4	; 0x04
    2436:	01 97       	sbiw	r24, 0x01	; 1
    2438:	f1 f7       	brne	.-4      	; 0x2436 <HAL_LCD_WriteData+0x482>
    243a:	9c 83       	std	Y+4, r25	; 0x04
    243c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    243e:	8d 81       	ldd	r24, Y+5	; 0x05
    2440:	9e 81       	ldd	r25, Y+6	; 0x06
    2442:	01 97       	sbiw	r24, 0x01	; 1
    2444:	9e 83       	std	Y+6, r25	; 0x06
    2446:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2448:	8d 81       	ldd	r24, Y+5	; 0x05
    244a:	9e 81       	ldd	r25, Y+6	; 0x06
    244c:	00 97       	sbiw	r24, 0x00	; 0
    244e:	69 f7       	brne	.-38     	; 0x242a <HAL_LCD_WriteData+0x476>
    2450:	14 c0       	rjmp	.+40     	; 0x247a <HAL_LCD_WriteData+0x4c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2452:	6f 81       	ldd	r22, Y+7	; 0x07
    2454:	78 85       	ldd	r23, Y+8	; 0x08
    2456:	89 85       	ldd	r24, Y+9	; 0x09
    2458:	9a 85       	ldd	r25, Y+10	; 0x0a
    245a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    245e:	dc 01       	movw	r26, r24
    2460:	cb 01       	movw	r24, r22
    2462:	9e 83       	std	Y+6, r25	; 0x06
    2464:	8d 83       	std	Y+5, r24	; 0x05
    2466:	8d 81       	ldd	r24, Y+5	; 0x05
    2468:	9e 81       	ldd	r25, Y+6	; 0x06
    246a:	9a 83       	std	Y+2, r25	; 0x02
    246c:	89 83       	std	Y+1, r24	; 0x01
    246e:	89 81       	ldd	r24, Y+1	; 0x01
    2470:	9a 81       	ldd	r25, Y+2	; 0x02
    2472:	01 97       	sbiw	r24, 0x01	; 1
    2474:	f1 f7       	brne	.-4      	; 0x2472 <HAL_LCD_WriteData+0x4be>
    2476:	9a 83       	std	Y+2, r25	; 0x02
    2478:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(1.6);
}
    247a:	ef 96       	adiw	r28, 0x3f	; 63
    247c:	0f b6       	in	r0, 0x3f	; 63
    247e:	f8 94       	cli
    2480:	de bf       	out	0x3e, r29	; 62
    2482:	0f be       	out	0x3f, r0	; 63
    2484:	cd bf       	out	0x3d, r28	; 61
    2486:	cf 91       	pop	r28
    2488:	df 91       	pop	r29
    248a:	08 95       	ret

0000248c <HAL_LCD_WriteString>:


void HAL_LCD_WriteString(u8 *string, u8 row, u8 col)
{
    248c:	df 93       	push	r29
    248e:	cf 93       	push	r28
    2490:	00 d0       	rcall	.+0      	; 0x2492 <HAL_LCD_WriteString+0x6>
    2492:	00 d0       	rcall	.+0      	; 0x2494 <HAL_LCD_WriteString+0x8>
    2494:	0f 92       	push	r0
    2496:	cd b7       	in	r28, 0x3d	; 61
    2498:	de b7       	in	r29, 0x3e	; 62
    249a:	9b 83       	std	Y+3, r25	; 0x03
    249c:	8a 83       	std	Y+2, r24	; 0x02
    249e:	6c 83       	std	Y+4, r22	; 0x04
    24a0:	4d 83       	std	Y+5, r20	; 0x05
	HAL_LCD_ChangePos(row,col);
    24a2:	8c 81       	ldd	r24, Y+4	; 0x04
    24a4:	6d 81       	ldd	r22, Y+5	; 0x05
    24a6:	0e 94 8a 12 	call	0x2514	; 0x2514 <HAL_LCD_ChangePos>
	u8 i = 0;
    24aa:	19 82       	std	Y+1, r1	; 0x01
    24ac:	20 c0       	rjmp	.+64     	; 0x24ee <HAL_LCD_WriteString+0x62>
	while(string[i] != '\0')
	{
		HAL_LCD_WriteData(string[i]);
    24ae:	89 81       	ldd	r24, Y+1	; 0x01
    24b0:	28 2f       	mov	r18, r24
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	8a 81       	ldd	r24, Y+2	; 0x02
    24b6:	9b 81       	ldd	r25, Y+3	; 0x03
    24b8:	fc 01       	movw	r30, r24
    24ba:	e2 0f       	add	r30, r18
    24bc:	f3 1f       	adc	r31, r19
    24be:	80 81       	ld	r24, Z
    24c0:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <HAL_LCD_WriteData>
		i++;
    24c4:	89 81       	ldd	r24, Y+1	; 0x01
    24c6:	8f 5f       	subi	r24, 0xFF	; 255
    24c8:	89 83       	std	Y+1, r24	; 0x01
		col++;
    24ca:	8d 81       	ldd	r24, Y+5	; 0x05
    24cc:	8f 5f       	subi	r24, 0xFF	; 255
    24ce:	8d 83       	std	Y+5, r24	; 0x05
		if(col >= COL_MAX)
    24d0:	8d 81       	ldd	r24, Y+5	; 0x05
    24d2:	84 31       	cpi	r24, 0x14	; 20
    24d4:	60 f0       	brcs	.+24     	; 0x24ee <HAL_LCD_WriteString+0x62>
		{
			col = 0;
    24d6:	1d 82       	std	Y+5, r1	; 0x05
			row++;
    24d8:	8c 81       	ldd	r24, Y+4	; 0x04
    24da:	8f 5f       	subi	r24, 0xFF	; 255
    24dc:	8c 83       	std	Y+4, r24	; 0x04
			if(row >= ROW_MAX) row = 0;
    24de:	8c 81       	ldd	r24, Y+4	; 0x04
    24e0:	84 30       	cpi	r24, 0x04	; 4
    24e2:	08 f0       	brcs	.+2      	; 0x24e6 <HAL_LCD_WriteString+0x5a>
    24e4:	1c 82       	std	Y+4, r1	; 0x04
			HAL_LCD_ChangePos(row,col);
    24e6:	8c 81       	ldd	r24, Y+4	; 0x04
    24e8:	6d 81       	ldd	r22, Y+5	; 0x05
    24ea:	0e 94 8a 12 	call	0x2514	; 0x2514 <HAL_LCD_ChangePos>

void HAL_LCD_WriteString(u8 *string, u8 row, u8 col)
{
	HAL_LCD_ChangePos(row,col);
	u8 i = 0;
	while(string[i] != '\0')
    24ee:	89 81       	ldd	r24, Y+1	; 0x01
    24f0:	28 2f       	mov	r18, r24
    24f2:	30 e0       	ldi	r19, 0x00	; 0
    24f4:	8a 81       	ldd	r24, Y+2	; 0x02
    24f6:	9b 81       	ldd	r25, Y+3	; 0x03
    24f8:	fc 01       	movw	r30, r24
    24fa:	e2 0f       	add	r30, r18
    24fc:	f3 1f       	adc	r31, r19
    24fe:	80 81       	ld	r24, Z
    2500:	88 23       	and	r24, r24
    2502:	a9 f6       	brne	.-86     	; 0x24ae <HAL_LCD_WriteString+0x22>
			row++;
			if(row >= ROW_MAX) row = 0;
			HAL_LCD_ChangePos(row,col);
		}
	}
}
    2504:	0f 90       	pop	r0
    2506:	0f 90       	pop	r0
    2508:	0f 90       	pop	r0
    250a:	0f 90       	pop	r0
    250c:	0f 90       	pop	r0
    250e:	cf 91       	pop	r28
    2510:	df 91       	pop	r29
    2512:	08 95       	ret

00002514 <HAL_LCD_ChangePos>:


void HAL_LCD_ChangePos(u8 row, u8 col)
{
    2514:	df 93       	push	r29
    2516:	cf 93       	push	r28
    2518:	00 d0       	rcall	.+0      	; 0x251a <HAL_LCD_ChangePos+0x6>
    251a:	cd b7       	in	r28, 0x3d	; 61
    251c:	de b7       	in	r29, 0x3e	; 62
    251e:	89 83       	std	Y+1, r24	; 0x01
    2520:	6a 83       	std	Y+2, r22	; 0x02
		u8 Address;
		Address = (row * 0x80) + col;
		SET_BIT(Address,7);
		HAL_LCD_SendCommand(Address);
	}*/
	if(row==0)
    2522:	89 81       	ldd	r24, Y+1	; 0x01
    2524:	88 23       	and	r24, r24
    2526:	29 f4       	brne	.+10     	; 0x2532 <HAL_LCD_ChangePos+0x1e>
	{
		HAL_LCD_SendCommand(0X80|col);
    2528:	8a 81       	ldd	r24, Y+2	; 0x02
    252a:	80 68       	ori	r24, 0x80	; 128
    252c:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <HAL_LCD_SendCommand>
    2530:	17 c0       	rjmp	.+46     	; 0x2560 <HAL_LCD_ChangePos+0x4c>
	}
	else if (row==1)
    2532:	89 81       	ldd	r24, Y+1	; 0x01
    2534:	81 30       	cpi	r24, 0x01	; 1
    2536:	29 f4       	brne	.+10     	; 0x2542 <HAL_LCD_ChangePos+0x2e>
	{
		HAL_LCD_SendCommand(0xc0+col);
    2538:	8a 81       	ldd	r24, Y+2	; 0x02
    253a:	80 54       	subi	r24, 0x40	; 64
    253c:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <HAL_LCD_SendCommand>
    2540:	0f c0       	rjmp	.+30     	; 0x2560 <HAL_LCD_ChangePos+0x4c>
	}
	else if (row==2)
    2542:	89 81       	ldd	r24, Y+1	; 0x01
    2544:	82 30       	cpi	r24, 0x02	; 2
    2546:	29 f4       	brne	.+10     	; 0x2552 <HAL_LCD_ChangePos+0x3e>
	{
		HAL_LCD_SendCommand(0x94+col);
    2548:	8a 81       	ldd	r24, Y+2	; 0x02
    254a:	8c 56       	subi	r24, 0x6C	; 108
    254c:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <HAL_LCD_SendCommand>
    2550:	07 c0       	rjmp	.+14     	; 0x2560 <HAL_LCD_ChangePos+0x4c>
	}
	else if (row==3)
    2552:	89 81       	ldd	r24, Y+1	; 0x01
    2554:	83 30       	cpi	r24, 0x03	; 3
    2556:	21 f4       	brne	.+8      	; 0x2560 <HAL_LCD_ChangePos+0x4c>
	{
		HAL_LCD_SendCommand(0xd4+col);
    2558:	8a 81       	ldd	r24, Y+2	; 0x02
    255a:	8c 52       	subi	r24, 0x2C	; 44
    255c:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <HAL_LCD_SendCommand>
	}

}
    2560:	0f 90       	pop	r0
    2562:	0f 90       	pop	r0
    2564:	cf 91       	pop	r28
    2566:	df 91       	pop	r29
    2568:	08 95       	ret

0000256a <HAL_LCD_AddPattern>:


void HAL_LCD_AddPattern(u8* Pattern, u8 CGRAM_index)
{
    256a:	df 93       	push	r29
    256c:	cf 93       	push	r28
    256e:	cd b7       	in	r28, 0x3d	; 61
    2570:	de b7       	in	r29, 0x3e	; 62
    2572:	63 97       	sbiw	r28, 0x13	; 19
    2574:	0f b6       	in	r0, 0x3f	; 63
    2576:	f8 94       	cli
    2578:	de bf       	out	0x3e, r29	; 62
    257a:	0f be       	out	0x3f, r0	; 63
    257c:	cd bf       	out	0x3d, r28	; 61
    257e:	9a 8b       	std	Y+18, r25	; 0x12
    2580:	89 8b       	std	Y+17, r24	; 0x11
    2582:	6b 8b       	std	Y+19, r22	; 0x13
	u8 Address;
	if(CGRAM_index < 8)
    2584:	8b 89       	ldd	r24, Y+19	; 0x13
    2586:	88 30       	cpi	r24, 0x08	; 8
    2588:	08 f0       	brcs	.+2      	; 0x258c <HAL_LCD_AddPattern+0x22>
    258a:	98 c0       	rjmp	.+304    	; 0x26bc <HAL_LCD_AddPattern+0x152>
	{
		Address = 8 * CGRAM_index;
    258c:	8b 89       	ldd	r24, Y+19	; 0x13
    258e:	88 2f       	mov	r24, r24
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	88 0f       	add	r24, r24
    2594:	99 1f       	adc	r25, r25
    2596:	88 0f       	add	r24, r24
    2598:	99 1f       	adc	r25, r25
    259a:	88 0f       	add	r24, r24
    259c:	99 1f       	adc	r25, r25
    259e:	88 8b       	std	Y+16, r24	; 0x10
		SET_BIT(Address,6);
    25a0:	88 89       	ldd	r24, Y+16	; 0x10
    25a2:	80 64       	ori	r24, 0x40	; 64
    25a4:	88 8b       	std	Y+16, r24	; 0x10
		HAL_LCD_SendCommand(Address);
    25a6:	88 89       	ldd	r24, Y+16	; 0x10
    25a8:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <HAL_LCD_SendCommand>
		for(u8 i = 0; i < 7; i++)
    25ac:	1f 86       	std	Y+15, r1	; 0x0f
    25ae:	0e c0       	rjmp	.+28     	; 0x25cc <HAL_LCD_AddPattern+0x62>
		{
			HAL_LCD_WriteData(Pattern[i]);
    25b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    25b2:	28 2f       	mov	r18, r24
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	89 89       	ldd	r24, Y+17	; 0x11
    25b8:	9a 89       	ldd	r25, Y+18	; 0x12
    25ba:	fc 01       	movw	r30, r24
    25bc:	e2 0f       	add	r30, r18
    25be:	f3 1f       	adc	r31, r19
    25c0:	80 81       	ld	r24, Z
    25c2:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <HAL_LCD_WriteData>
	if(CGRAM_index < 8)
	{
		Address = 8 * CGRAM_index;
		SET_BIT(Address,6);
		HAL_LCD_SendCommand(Address);
		for(u8 i = 0; i < 7; i++)
    25c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    25c8:	8f 5f       	subi	r24, 0xFF	; 255
    25ca:	8f 87       	std	Y+15, r24	; 0x0f
    25cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    25ce:	87 30       	cpi	r24, 0x07	; 7
    25d0:	78 f3       	brcs	.-34     	; 0x25b0 <HAL_LCD_AddPattern+0x46>
		{
			HAL_LCD_WriteData(Pattern[i]);
		}
		HOME_POS;
    25d2:	82 e0       	ldi	r24, 0x02	; 2
    25d4:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <HAL_LCD_SendCommand>
    25d8:	80 e0       	ldi	r24, 0x00	; 0
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	a0 e0       	ldi	r26, 0x00	; 0
    25de:	b0 e4       	ldi	r27, 0x40	; 64
    25e0:	8b 87       	std	Y+11, r24	; 0x0b
    25e2:	9c 87       	std	Y+12, r25	; 0x0c
    25e4:	ad 87       	std	Y+13, r26	; 0x0d
    25e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    25ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    25ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    25ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    25f0:	20 e0       	ldi	r18, 0x00	; 0
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	4a e7       	ldi	r20, 0x7A	; 122
    25f6:	55 e4       	ldi	r21, 0x45	; 69
    25f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25fc:	dc 01       	movw	r26, r24
    25fe:	cb 01       	movw	r24, r22
    2600:	8f 83       	std	Y+7, r24	; 0x07
    2602:	98 87       	std	Y+8, r25	; 0x08
    2604:	a9 87       	std	Y+9, r26	; 0x09
    2606:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2608:	6f 81       	ldd	r22, Y+7	; 0x07
    260a:	78 85       	ldd	r23, Y+8	; 0x08
    260c:	89 85       	ldd	r24, Y+9	; 0x09
    260e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2610:	20 e0       	ldi	r18, 0x00	; 0
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	40 e8       	ldi	r20, 0x80	; 128
    2616:	5f e3       	ldi	r21, 0x3F	; 63
    2618:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    261c:	88 23       	and	r24, r24
    261e:	2c f4       	brge	.+10     	; 0x262a <HAL_LCD_AddPattern+0xc0>
		__ticks = 1;
    2620:	81 e0       	ldi	r24, 0x01	; 1
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	9e 83       	std	Y+6, r25	; 0x06
    2626:	8d 83       	std	Y+5, r24	; 0x05
    2628:	3f c0       	rjmp	.+126    	; 0x26a8 <HAL_LCD_AddPattern+0x13e>
	else if (__tmp > 65535)
    262a:	6f 81       	ldd	r22, Y+7	; 0x07
    262c:	78 85       	ldd	r23, Y+8	; 0x08
    262e:	89 85       	ldd	r24, Y+9	; 0x09
    2630:	9a 85       	ldd	r25, Y+10	; 0x0a
    2632:	20 e0       	ldi	r18, 0x00	; 0
    2634:	3f ef       	ldi	r19, 0xFF	; 255
    2636:	4f e7       	ldi	r20, 0x7F	; 127
    2638:	57 e4       	ldi	r21, 0x47	; 71
    263a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    263e:	18 16       	cp	r1, r24
    2640:	4c f5       	brge	.+82     	; 0x2694 <HAL_LCD_AddPattern+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2642:	6b 85       	ldd	r22, Y+11	; 0x0b
    2644:	7c 85       	ldd	r23, Y+12	; 0x0c
    2646:	8d 85       	ldd	r24, Y+13	; 0x0d
    2648:	9e 85       	ldd	r25, Y+14	; 0x0e
    264a:	20 e0       	ldi	r18, 0x00	; 0
    264c:	30 e0       	ldi	r19, 0x00	; 0
    264e:	40 e2       	ldi	r20, 0x20	; 32
    2650:	51 e4       	ldi	r21, 0x41	; 65
    2652:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2656:	dc 01       	movw	r26, r24
    2658:	cb 01       	movw	r24, r22
    265a:	bc 01       	movw	r22, r24
    265c:	cd 01       	movw	r24, r26
    265e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2662:	dc 01       	movw	r26, r24
    2664:	cb 01       	movw	r24, r22
    2666:	9e 83       	std	Y+6, r25	; 0x06
    2668:	8d 83       	std	Y+5, r24	; 0x05
    266a:	0f c0       	rjmp	.+30     	; 0x268a <HAL_LCD_AddPattern+0x120>
    266c:	80 e9       	ldi	r24, 0x90	; 144
    266e:	91 e0       	ldi	r25, 0x01	; 1
    2670:	9c 83       	std	Y+4, r25	; 0x04
    2672:	8b 83       	std	Y+3, r24	; 0x03
    2674:	8b 81       	ldd	r24, Y+3	; 0x03
    2676:	9c 81       	ldd	r25, Y+4	; 0x04
    2678:	01 97       	sbiw	r24, 0x01	; 1
    267a:	f1 f7       	brne	.-4      	; 0x2678 <HAL_LCD_AddPattern+0x10e>
    267c:	9c 83       	std	Y+4, r25	; 0x04
    267e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2680:	8d 81       	ldd	r24, Y+5	; 0x05
    2682:	9e 81       	ldd	r25, Y+6	; 0x06
    2684:	01 97       	sbiw	r24, 0x01	; 1
    2686:	9e 83       	std	Y+6, r25	; 0x06
    2688:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    268a:	8d 81       	ldd	r24, Y+5	; 0x05
    268c:	9e 81       	ldd	r25, Y+6	; 0x06
    268e:	00 97       	sbiw	r24, 0x00	; 0
    2690:	69 f7       	brne	.-38     	; 0x266c <HAL_LCD_AddPattern+0x102>
    2692:	14 c0       	rjmp	.+40     	; 0x26bc <HAL_LCD_AddPattern+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2694:	6f 81       	ldd	r22, Y+7	; 0x07
    2696:	78 85       	ldd	r23, Y+8	; 0x08
    2698:	89 85       	ldd	r24, Y+9	; 0x09
    269a:	9a 85       	ldd	r25, Y+10	; 0x0a
    269c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a0:	dc 01       	movw	r26, r24
    26a2:	cb 01       	movw	r24, r22
    26a4:	9e 83       	std	Y+6, r25	; 0x06
    26a6:	8d 83       	std	Y+5, r24	; 0x05
    26a8:	8d 81       	ldd	r24, Y+5	; 0x05
    26aa:	9e 81       	ldd	r25, Y+6	; 0x06
    26ac:	9a 83       	std	Y+2, r25	; 0x02
    26ae:	89 83       	std	Y+1, r24	; 0x01
    26b0:	89 81       	ldd	r24, Y+1	; 0x01
    26b2:	9a 81       	ldd	r25, Y+2	; 0x02
    26b4:	01 97       	sbiw	r24, 0x01	; 1
    26b6:	f1 f7       	brne	.-4      	; 0x26b4 <HAL_LCD_AddPattern+0x14a>
    26b8:	9a 83       	std	Y+2, r25	; 0x02
    26ba:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
	}
}
    26bc:	63 96       	adiw	r28, 0x13	; 19
    26be:	0f b6       	in	r0, 0x3f	; 63
    26c0:	f8 94       	cli
    26c2:	de bf       	out	0x3e, r29	; 62
    26c4:	0f be       	out	0x3f, r0	; 63
    26c6:	cd bf       	out	0x3d, r28	; 61
    26c8:	cf 91       	pop	r28
    26ca:	df 91       	pop	r29
    26cc:	08 95       	ret

000026ce <main>:



/** ========================= The main function ============================= */
int main(void)
{
    26ce:	df 93       	push	r29
    26d0:	cf 93       	push	r28
    26d2:	cd b7       	in	r28, 0x3d	; 61
    26d4:	de b7       	in	r29, 0x3e	; 62
    26d6:	62 97       	sbiw	r28, 0x12	; 18
    26d8:	0f b6       	in	r0, 0x3f	; 63
    26da:	f8 94       	cli
    26dc:	de bf       	out	0x3e, r29	; 62
    26de:	0f be       	out	0x3f, r0	; 63
    26e0:	cd bf       	out	0x3d, r28	; 61
	Initialize_System();
    26e2:	0e 94 1a 14 	call	0x2834	; 0x2834 <Initialize_System>
	while(1)
	{
		//HAL_LCD_WriteString("Hello",2,0);
		s8 i=0,j=0;
    26e6:	1a 8a       	std	Y+18, r1	; 0x12
    26e8:	19 8a       	std	Y+17, r1	; 0x11
		u8 rising=1,falling=0;
    26ea:	81 e0       	ldi	r24, 0x01	; 1
    26ec:	88 8b       	std	Y+16, r24	; 0x10
    26ee:	1f 86       	std	Y+15, r1	; 0x0f
    26f0:	9c c0       	rjmp	.+312    	; 0x282a <main+0x15c>
		while(j<20)
		{
			HAL_LCD_ChangePos(i,j);
    26f2:	8a 89       	ldd	r24, Y+18	; 0x12
    26f4:	99 89       	ldd	r25, Y+17	; 0x11
    26f6:	69 2f       	mov	r22, r25
    26f8:	0e 94 8a 12 	call	0x2514	; 0x2514 <HAL_LCD_ChangePos>
			HAL_LCD_WriteData('O');
    26fc:	8f e4       	ldi	r24, 0x4F	; 79
    26fe:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <HAL_LCD_WriteData>
    2702:	80 e0       	ldi	r24, 0x00	; 0
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	aa ef       	ldi	r26, 0xFA	; 250
    2708:	b3 e4       	ldi	r27, 0x43	; 67
    270a:	8b 87       	std	Y+11, r24	; 0x0b
    270c:	9c 87       	std	Y+12, r25	; 0x0c
    270e:	ad 87       	std	Y+13, r26	; 0x0d
    2710:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2712:	6b 85       	ldd	r22, Y+11	; 0x0b
    2714:	7c 85       	ldd	r23, Y+12	; 0x0c
    2716:	8d 85       	ldd	r24, Y+13	; 0x0d
    2718:	9e 85       	ldd	r25, Y+14	; 0x0e
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	4a e7       	ldi	r20, 0x7A	; 122
    2720:	55 e4       	ldi	r21, 0x45	; 69
    2722:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2726:	dc 01       	movw	r26, r24
    2728:	cb 01       	movw	r24, r22
    272a:	8f 83       	std	Y+7, r24	; 0x07
    272c:	98 87       	std	Y+8, r25	; 0x08
    272e:	a9 87       	std	Y+9, r26	; 0x09
    2730:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2732:	6f 81       	ldd	r22, Y+7	; 0x07
    2734:	78 85       	ldd	r23, Y+8	; 0x08
    2736:	89 85       	ldd	r24, Y+9	; 0x09
    2738:	9a 85       	ldd	r25, Y+10	; 0x0a
    273a:	20 e0       	ldi	r18, 0x00	; 0
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	40 e8       	ldi	r20, 0x80	; 128
    2740:	5f e3       	ldi	r21, 0x3F	; 63
    2742:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2746:	88 23       	and	r24, r24
    2748:	2c f4       	brge	.+10     	; 0x2754 <main+0x86>
		__ticks = 1;
    274a:	81 e0       	ldi	r24, 0x01	; 1
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	9e 83       	std	Y+6, r25	; 0x06
    2750:	8d 83       	std	Y+5, r24	; 0x05
    2752:	3f c0       	rjmp	.+126    	; 0x27d2 <main+0x104>
	else if (__tmp > 65535)
    2754:	6f 81       	ldd	r22, Y+7	; 0x07
    2756:	78 85       	ldd	r23, Y+8	; 0x08
    2758:	89 85       	ldd	r24, Y+9	; 0x09
    275a:	9a 85       	ldd	r25, Y+10	; 0x0a
    275c:	20 e0       	ldi	r18, 0x00	; 0
    275e:	3f ef       	ldi	r19, 0xFF	; 255
    2760:	4f e7       	ldi	r20, 0x7F	; 127
    2762:	57 e4       	ldi	r21, 0x47	; 71
    2764:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2768:	18 16       	cp	r1, r24
    276a:	4c f5       	brge	.+82     	; 0x27be <main+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    276c:	6b 85       	ldd	r22, Y+11	; 0x0b
    276e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2770:	8d 85       	ldd	r24, Y+13	; 0x0d
    2772:	9e 85       	ldd	r25, Y+14	; 0x0e
    2774:	20 e0       	ldi	r18, 0x00	; 0
    2776:	30 e0       	ldi	r19, 0x00	; 0
    2778:	40 e2       	ldi	r20, 0x20	; 32
    277a:	51 e4       	ldi	r21, 0x41	; 65
    277c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2780:	dc 01       	movw	r26, r24
    2782:	cb 01       	movw	r24, r22
    2784:	bc 01       	movw	r22, r24
    2786:	cd 01       	movw	r24, r26
    2788:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    278c:	dc 01       	movw	r26, r24
    278e:	cb 01       	movw	r24, r22
    2790:	9e 83       	std	Y+6, r25	; 0x06
    2792:	8d 83       	std	Y+5, r24	; 0x05
    2794:	0f c0       	rjmp	.+30     	; 0x27b4 <main+0xe6>
    2796:	80 e9       	ldi	r24, 0x90	; 144
    2798:	91 e0       	ldi	r25, 0x01	; 1
    279a:	9c 83       	std	Y+4, r25	; 0x04
    279c:	8b 83       	std	Y+3, r24	; 0x03
    279e:	8b 81       	ldd	r24, Y+3	; 0x03
    27a0:	9c 81       	ldd	r25, Y+4	; 0x04
    27a2:	01 97       	sbiw	r24, 0x01	; 1
    27a4:	f1 f7       	brne	.-4      	; 0x27a2 <main+0xd4>
    27a6:	9c 83       	std	Y+4, r25	; 0x04
    27a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27aa:	8d 81       	ldd	r24, Y+5	; 0x05
    27ac:	9e 81       	ldd	r25, Y+6	; 0x06
    27ae:	01 97       	sbiw	r24, 0x01	; 1
    27b0:	9e 83       	std	Y+6, r25	; 0x06
    27b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27b4:	8d 81       	ldd	r24, Y+5	; 0x05
    27b6:	9e 81       	ldd	r25, Y+6	; 0x06
    27b8:	00 97       	sbiw	r24, 0x00	; 0
    27ba:	69 f7       	brne	.-38     	; 0x2796 <main+0xc8>
    27bc:	14 c0       	rjmp	.+40     	; 0x27e6 <main+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27be:	6f 81       	ldd	r22, Y+7	; 0x07
    27c0:	78 85       	ldd	r23, Y+8	; 0x08
    27c2:	89 85       	ldd	r24, Y+9	; 0x09
    27c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    27c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ca:	dc 01       	movw	r26, r24
    27cc:	cb 01       	movw	r24, r22
    27ce:	9e 83       	std	Y+6, r25	; 0x06
    27d0:	8d 83       	std	Y+5, r24	; 0x05
    27d2:	8d 81       	ldd	r24, Y+5	; 0x05
    27d4:	9e 81       	ldd	r25, Y+6	; 0x06
    27d6:	9a 83       	std	Y+2, r25	; 0x02
    27d8:	89 83       	std	Y+1, r24	; 0x01
    27da:	89 81       	ldd	r24, Y+1	; 0x01
    27dc:	9a 81       	ldd	r25, Y+2	; 0x02
    27de:	01 97       	sbiw	r24, 0x01	; 1
    27e0:	f1 f7       	brne	.-4      	; 0x27de <main+0x110>
    27e2:	9a 83       	std	Y+2, r25	; 0x02
    27e4:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			HAL_LCD_SendCommand(0x01);
    27e6:	81 e0       	ldi	r24, 0x01	; 1
    27e8:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <HAL_LCD_SendCommand>
			j++;
    27ec:	89 89       	ldd	r24, Y+17	; 0x11
    27ee:	8f 5f       	subi	r24, 0xFF	; 255
    27f0:	89 8b       	std	Y+17, r24	; 0x11
			if(rising)
    27f2:	88 89       	ldd	r24, Y+16	; 0x10
    27f4:	88 23       	and	r24, r24
    27f6:	19 f0       	breq	.+6      	; 0x27fe <main+0x130>
			{i--;}
    27f8:	8a 89       	ldd	r24, Y+18	; 0x12
    27fa:	81 50       	subi	r24, 0x01	; 1
    27fc:	8a 8b       	std	Y+18, r24	; 0x12
			if(falling)
    27fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2800:	88 23       	and	r24, r24
    2802:	19 f0       	breq	.+6      	; 0x280a <main+0x13c>
			{i++;}
    2804:	8a 89       	ldd	r24, Y+18	; 0x12
    2806:	8f 5f       	subi	r24, 0xFF	; 255
    2808:	8a 8b       	std	Y+18, r24	; 0x12
			if(i<0)
    280a:	8a 89       	ldd	r24, Y+18	; 0x12
    280c:	88 23       	and	r24, r24
    280e:	2c f4       	brge	.+10     	; 0x281a <main+0x14c>
			{
				rising=0;
    2810:	18 8a       	std	Y+16, r1	; 0x10
				falling=1;
    2812:	81 e0       	ldi	r24, 0x01	; 1
    2814:	8f 87       	std	Y+15, r24	; 0x0f
				i=1;
    2816:	81 e0       	ldi	r24, 0x01	; 1
    2818:	8a 8b       	std	Y+18, r24	; 0x12
			}
			if(i>3)
    281a:	8a 89       	ldd	r24, Y+18	; 0x12
    281c:	84 30       	cpi	r24, 0x04	; 4
    281e:	2c f0       	brlt	.+10     	; 0x282a <main+0x15c>
			{
				rising=1;
    2820:	81 e0       	ldi	r24, 0x01	; 1
    2822:	88 8b       	std	Y+16, r24	; 0x10
				falling=0;
    2824:	1f 86       	std	Y+15, r1	; 0x0f
				i=2;
    2826:	82 e0       	ldi	r24, 0x02	; 2
    2828:	8a 8b       	std	Y+18, r24	; 0x12
	while(1)
	{
		//HAL_LCD_WriteString("Hello",2,0);
		s8 i=0,j=0;
		u8 rising=1,falling=0;
		while(j<20)
    282a:	89 89       	ldd	r24, Y+17	; 0x11
    282c:	84 31       	cpi	r24, 0x14	; 20
    282e:	0c f4       	brge	.+2      	; 0x2832 <main+0x164>
    2830:	60 cf       	rjmp	.-320    	; 0x26f2 <main+0x24>
    2832:	59 cf       	rjmp	.-334    	; 0x26e6 <main+0x18>

00002834 <Initialize_System>:



/**   This function contains all the initialization required for the system   */
void Initialize_System(void)
{
    2834:	df 93       	push	r29
    2836:	cf 93       	push	r28
    2838:	cd b7       	in	r28, 0x3d	; 61
    283a:	de b7       	in	r29, 0x3e	; 62
	HAL_LCD_Init();
    283c:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <HAL_LCD_Init>
}
    2840:	cf 91       	pop	r28
    2842:	df 91       	pop	r29
    2844:	08 95       	ret

00002846 <__prologue_saves__>:
    2846:	2f 92       	push	r2
    2848:	3f 92       	push	r3
    284a:	4f 92       	push	r4
    284c:	5f 92       	push	r5
    284e:	6f 92       	push	r6
    2850:	7f 92       	push	r7
    2852:	8f 92       	push	r8
    2854:	9f 92       	push	r9
    2856:	af 92       	push	r10
    2858:	bf 92       	push	r11
    285a:	cf 92       	push	r12
    285c:	df 92       	push	r13
    285e:	ef 92       	push	r14
    2860:	ff 92       	push	r15
    2862:	0f 93       	push	r16
    2864:	1f 93       	push	r17
    2866:	cf 93       	push	r28
    2868:	df 93       	push	r29
    286a:	cd b7       	in	r28, 0x3d	; 61
    286c:	de b7       	in	r29, 0x3e	; 62
    286e:	ca 1b       	sub	r28, r26
    2870:	db 0b       	sbc	r29, r27
    2872:	0f b6       	in	r0, 0x3f	; 63
    2874:	f8 94       	cli
    2876:	de bf       	out	0x3e, r29	; 62
    2878:	0f be       	out	0x3f, r0	; 63
    287a:	cd bf       	out	0x3d, r28	; 61
    287c:	09 94       	ijmp

0000287e <__epilogue_restores__>:
    287e:	2a 88       	ldd	r2, Y+18	; 0x12
    2880:	39 88       	ldd	r3, Y+17	; 0x11
    2882:	48 88       	ldd	r4, Y+16	; 0x10
    2884:	5f 84       	ldd	r5, Y+15	; 0x0f
    2886:	6e 84       	ldd	r6, Y+14	; 0x0e
    2888:	7d 84       	ldd	r7, Y+13	; 0x0d
    288a:	8c 84       	ldd	r8, Y+12	; 0x0c
    288c:	9b 84       	ldd	r9, Y+11	; 0x0b
    288e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2890:	b9 84       	ldd	r11, Y+9	; 0x09
    2892:	c8 84       	ldd	r12, Y+8	; 0x08
    2894:	df 80       	ldd	r13, Y+7	; 0x07
    2896:	ee 80       	ldd	r14, Y+6	; 0x06
    2898:	fd 80       	ldd	r15, Y+5	; 0x05
    289a:	0c 81       	ldd	r16, Y+4	; 0x04
    289c:	1b 81       	ldd	r17, Y+3	; 0x03
    289e:	aa 81       	ldd	r26, Y+2	; 0x02
    28a0:	b9 81       	ldd	r27, Y+1	; 0x01
    28a2:	ce 0f       	add	r28, r30
    28a4:	d1 1d       	adc	r29, r1
    28a6:	0f b6       	in	r0, 0x3f	; 63
    28a8:	f8 94       	cli
    28aa:	de bf       	out	0x3e, r29	; 62
    28ac:	0f be       	out	0x3f, r0	; 63
    28ae:	cd bf       	out	0x3d, r28	; 61
    28b0:	ed 01       	movw	r28, r26
    28b2:	08 95       	ret

000028b4 <_exit>:
    28b4:	f8 94       	cli

000028b6 <__stop_program>:
    28b6:	ff cf       	rjmp	.-2      	; 0x28b6 <__stop_program>
